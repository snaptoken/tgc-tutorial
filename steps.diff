~~~ step: alloc-prototype
diff --git a/tgc.h b/tgc.h
new file mode 100644
--- /dev/null
+++ b/tgc.h
@@ -0,0 +1 @@
+void *tgc_alloc(size_t size);

~~~ step: include-stdlib
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -1 +1,3 @@
+#include <stdlib.h>
+
 void *tgc_alloc(size_t size);

~~~ step: ifndef-define
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -1,3 +1,8 @@
+#ifndef TGC_H
+#define TGC_H
+
 #include <stdlib.h>
 
 void *tgc_alloc(size_t size);
+
+#endif

~~~ step: alloc
diff --git a/tgc.c b/tgc.c
new file mode 100644
--- /dev/null
+++ b/tgc.c
@@ -0,0 +1,4 @@
+void *tgc_alloc(size_t size) {
+  void *ptr = malloc(size);
+  return ptr;
+}

~~~ step: include-tgc
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -1,3 +1,5 @@
+#include "tgc.h"
+
 void *tgc_alloc(size_t size) {
   void *ptr = malloc(size);
   return ptr;

~~~ step: allocator-functions-section
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -1,5 +1,7 @@
 #include "tgc.h"
 
+/*** allocator functions ***/
+
 void *tgc_alloc(size_t size) {
   void *ptr = malloc(size);
   return ptr;

~~~ step: tgc-ptr-struct
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -3,6 +3,10 @@
 
 #include <stdlib.h>
 
+typedef struct {
+  void *ptr;
+} tgc_ptr_t;
+
 void *tgc_alloc(size_t size);
 
 #endif

~~~ step: tgc-struct
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -7,6 +7,11 @@ typedef struct {
   void *ptr;
 } tgc_ptr_t;
 
+typedef struct {
+  tgc_ptr_t *items;
+  size_t nitems, nslots;
+} tgc_t;
+
 void *tgc_alloc(size_t size);
 
 #endif

~~~ step: start-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -12,6 +12,8 @@ typedef struct {
   size_t nitems, nslots;
 } tgc_t;
 
+void tgc_start(tgc_t *gc);
+
 void *tgc_alloc(size_t size);
 
 #endif

~~~ step: start
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -1,5 +1,13 @@
 #include "tgc.h"
 
+/*** gc control ***/
+
+void tgc_start(tgc_t *gc) {
+  gc->nitems = 0;
+  gc->nslots = 0;
+  gc->items = NULL;
+}
+
 /*** allocator functions ***/
 
 void *tgc_alloc(size_t size) {

~~~ step: alloc-gc-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,6 +14,6 @@ typedef struct {
 
 void tgc_start(tgc_t *gc);
 
-void *tgc_alloc(size_t size);
+void *tgc_alloc(tgc_t *gc, size_t size);
 
 #endif

~~~ step: alloc-gc
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -10,7 +10,7 @@ void tgc_start(tgc_t *gc) {
 
 /*** allocator functions ***/
 
-void *tgc_alloc(size_t size) {
+void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
   return ptr;
 }

~~~ step: call-add
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -12,5 +12,6 @@ void tgc_start(tgc_t *gc) {
 
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
+  tgc_add(gc, ptr);
   return ptr;
 }

~~~ step: add
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -10,6 +10,12 @@ void tgc_start(tgc_t *gc) {
 
 /*** allocator functions ***/
 
+static void tgc_add(tgc_t *gc, void *ptr) {
+  gc->nitems++;
+  tgc_resize(gc);
+  tgc_add_ptr(gc, ptr);
+}
+
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
   tgc_add(gc, ptr);

~~~ step: resize
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -1,5 +1,14 @@
 #include "tgc.h"
 
+/*** resize pointer table ***/
+
+static void tgc_resize(tgc_t *gc) {
+  if (gc->nslots >= gc->nitems) return;
+
+  gc->nslots = gc->nitems * 2;
+  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
+}
+
 /*** gc control ***/
 
 void tgc_start(tgc_t *gc) {

~~~ step: resize-memcpy
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -3,10 +3,15 @@
 /*** resize pointer table ***/
 
 static void tgc_resize(tgc_t *gc) {
+  tgc_ptr_t *old_items = gc->items;
+  size_t old_size = gc->nslots;
+
   if (gc->nslots >= gc->nitems) return;
 
   gc->nslots = gc->nitems * 2;
   gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
+
+  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
 }
 
 /*** gc control ***/

~~~ step: include-string
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -2,6 +2,7 @@
 #define TGC_H
 
 #include <stdlib.h>
+#include <string.h>
 
 typedef struct {
   void *ptr;

~~~ step: resize-free
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -12,6 +12,8 @@ static void tgc_resize(tgc_t *gc) {
   gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
 
   memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
+
+  free(old_items);
 }
 
 /*** gc control ***/

~~~ step: add-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -1,5 +1,21 @@
 #include "tgc.h"
 
+/*** pointer table operations ***/
+
+static void tgc_add_ptr(tgc_t *gc, void *ptr) {
+  tgc_ptr_t item;
+  size_t i;
+
+  item.ptr = ptr;
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].ptr == NULL) {
+      gc->items[i] = item;
+      return;
+    }
+  }
+}
+
 /*** resize pointer table ***/
 
 static void tgc_resize(tgc_t *gc) {

~~~ step: add-ptr-check-already-exists
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -13,6 +13,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr) {
       gc->items[i] = item;
       return;
     }
+    if (gc->items[i].ptr == item.ptr) { return; }
   }
 }
 

~~~ step: alloc-handle-null
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -51,6 +51,8 @@ static void tgc_add(tgc_t *gc, void *ptr) {
 
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
-  tgc_add(gc, ptr);
+  if (ptr != NULL) {
+    tgc_add(gc, ptr);
+  }
   return ptr;
 }

~~~ step: resize-handle-null
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -19,18 +19,26 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr) {
 
 /*** resize pointer table ***/
 
-static void tgc_resize(tgc_t *gc) {
+static int tgc_resize(tgc_t *gc) {
   tgc_ptr_t *old_items = gc->items;
   size_t old_size = gc->nslots;
 
-  if (gc->nslots >= gc->nitems) return;
+  if (gc->nslots >= gc->nitems) return 1;
 
   gc->nslots = gc->nitems * 2;
   gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
 
+  if (gc->items == NULL) {
+    gc->nslots = old_size;
+    gc->items = old_items;
+    return 0;
+  }
+
   memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
 
   free(old_items);
+
+  return 1;
 }
 
 /*** gc control ***/

~~~ step: add-handle-resize-failure
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -51,10 +51,17 @@ void tgc_start(tgc_t *gc) {
 
 /*** allocator functions ***/
 
-static void tgc_add(tgc_t *gc, void *ptr) {
+static void *tgc_add(tgc_t *gc, void *ptr) {
   gc->nitems++;
-  tgc_resize(gc);
-  tgc_add_ptr(gc, ptr);
+
+  if (tgc_resize(gc)) {
+    tgc_add_ptr(gc, ptr);
+    return ptr;
+  } else {
+    gc->nitems--;
+    free(ptr);
+    return NULL;
+  }
 }
 
 void *tgc_alloc(tgc_t *gc, size_t size) {

~~~ step: alloc-handle-add-failure
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -67,7 +67,7 @@ static void *tgc_add(tgc_t *gc, void *ptr) {
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
   if (ptr != NULL) {
-    tgc_add(gc, ptr);
+    ptr = tgc_add(gc, ptr);
   }
   return ptr;
 }

~~~ step: sweep
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -41,6 +41,19 @@ static int tgc_resize(tgc_t *gc) {
   return 1;
 }
 
+/*** mark and sweep ***/
+
+static void tgc_sweep(tgc_t *gc) {
+  size_t i;
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].ptr == NULL) { continue; }
+    free(gc->items[i].ptr);
+    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+    gc->nitems--;
+  }
+}
+
 /*** gc control ***/
 
 void tgc_start(tgc_t *gc) {

~~~ step: sweep-return-early
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -46,6 +46,8 @@ static int tgc_resize(tgc_t *gc) {
 static void tgc_sweep(tgc_t *gc) {
   size_t i;
 
+  if (gc->nitems == 0) { return; }
+
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) { continue; }
     free(gc->items[i].ptr);

~~~ step: stop-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,6 +14,7 @@ typedef struct {
 } tgc_t;
 
 void tgc_start(tgc_t *gc);
+void tgc_stop(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);
 

~~~ step: stop
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -64,6 +64,11 @@ void tgc_start(tgc_t *gc) {
   gc->items = NULL;
 }
 
+void tgc_stop(tgc_t *gc) {
+  tgc_sweep(gc);
+  free(gc->items);
+}
+
 /*** allocator functions ***/
 
 static void *tgc_add(tgc_t *gc, void *ptr) {

~~~ step: add-mark
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -6,6 +6,7 @@
 
 typedef struct {
   void *ptr;
+  int mark;
 } tgc_ptr_t;
 
 typedef struct {

~~~ step: set-mark
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -7,6 +7,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr) {
   size_t i;
 
   item.ptr = ptr;
+  item.mark = 0;
 
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) {

~~~ step: mark-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -44,6 +44,17 @@ static int tgc_resize(tgc_t *gc) {
 
 /*** mark and sweep ***/
 
+static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
+  size_t i;
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (ptr == gc->items[i].ptr) {
+      gc->items[i].mark = 1;
+      return;
+    }
+  }
+}
+
 static void tgc_sweep(tgc_t *gc) {
   size_t i;
 

~~~ step: add-bottom
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -10,6 +10,7 @@ typedef struct {
 } tgc_ptr_t;
 
 typedef struct {
+  void *bottom;
   tgc_ptr_t *items;
   size_t nitems, nslots;
 } tgc_t;

~~~ step: start-stk
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -15,7 +15,7 @@ typedef struct {
   size_t nitems, nslots;
 } tgc_t;
 
-void tgc_start(tgc_t *gc);
+void tgc_start(tgc_t *gc, void *stk);
 void tgc_stop(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);

~~~ step: set-bottom
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -70,7 +70,8 @@ static void tgc_sweep(tgc_t *gc) {
 
 /*** gc control ***/
 
-void tgc_start(tgc_t *gc) {
+void tgc_start(tgc_t *gc, void *stk) {
+  gc->bottom = stk;
   gc->nitems = 0;
   gc->nslots = 0;
   gc->items = NULL;

~~~ step: mark-stack
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -55,6 +55,15 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   }
 }
 
+static void tgc_mark_stack(tgc_t *gc) {
+  void *stk, *bot, *top, *p;
+  bot = gc->bottom; top = &stk;
+
+  for (p = top; p <= bot; p = ((char*)p) + sizeof(void*)) {
+    tgc_mark_ptr(gc, *((void**)p));
+  }
+}
+
 static void tgc_sweep(tgc_t *gc) {
   size_t i;
 

~~~ step: mark-stack-handle-both-directions
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -59,8 +59,16 @@ static void tgc_mark_stack(tgc_t *gc) {
   void *stk, *bot, *top, *p;
   bot = gc->bottom; top = &stk;
 
-  for (p = top; p <= bot; p = ((char*)p) + sizeof(void*)) {
-    tgc_mark_ptr(gc, *((void**)p));
+  if (bot < top) {
+    for (p = top; p >= bot; p = ((char*)p) - sizeof(void*)) {
+      tgc_mark_ptr(gc, *((void**)p));
+    }
+  }
+
+  if (bot > top) {
+    for (p = top; p <= bot; p = ((char*)p) + sizeof(void*)) {
+      tgc_mark_ptr(gc, *((void**)p));
+    }
   }
 }
 

~~~ step: mark
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -72,6 +72,10 @@ static void tgc_mark_stack(tgc_t *gc) {
   }
 }
 
+static void tgc_mark(tgc_t *gc) {
+  tgc_mark_stack(gc);
+}
+
 static void tgc_sweep(tgc_t *gc) {
   size_t i;
 

~~~ step: mark-return-early
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -73,6 +73,8 @@ static void tgc_mark_stack(tgc_t *gc) {
 }
 
 static void tgc_mark(tgc_t *gc) {
+  if (gc->nitems == 0) { return; }
+
   tgc_mark_stack(gc);
 }
 

~~~ step: mark-volatile
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -73,9 +73,11 @@ static void tgc_mark_stack(tgc_t *gc) {
 }
 
 static void tgc_mark(tgc_t *gc) {
+  void (*volatile mark_stack)(tgc_t*) = tgc_mark_stack;
+
   if (gc->nitems == 0) { return; }
 
-  tgc_mark_stack(gc);
+  mark_stack(gc);
 }
 
 static void tgc_sweep(tgc_t *gc) {

~~~ step: add-size
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -7,6 +7,7 @@
 typedef struct {
   void *ptr;
   int mark;
+  size_t size;
 } tgc_ptr_t;
 
 typedef struct {

~~~ step: add-ptr-size
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -2,12 +2,13 @@
 
 /*** pointer table operations ***/
 
-static void tgc_add_ptr(tgc_t *gc, void *ptr) {
+static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
   size_t i;
 
   item.ptr = ptr;
   item.mark = 0;
+  item.size = size;
 
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) {

~~~ step: add-pass-size
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -110,11 +110,11 @@ void tgc_stop(tgc_t *gc) {
 
 /*** allocator functions ***/
 
-static void *tgc_add(tgc_t *gc, void *ptr) {
+static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
   gc->nitems++;
 
   if (tgc_resize(gc)) {
-    tgc_add_ptr(gc, ptr);
+    tgc_add_ptr(gc, ptr, size);
     return ptr;
   } else {
     gc->nitems--;

~~~ step: alloc-pass-size
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -126,7 +126,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
   if (ptr != NULL) {
-    ptr = tgc_add(gc, ptr);
+    ptr = tgc_add(gc, ptr, size);
   }
   return ptr;
 }

~~~ step: mark-heap
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -46,11 +46,14 @@ static int tgc_resize(tgc_t *gc) {
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i;
+  size_t i, k;
 
   for (i = 0; i < gc->nslots; i++) {
     if (ptr == gc->items[i].ptr) {
       gc->items[i].mark = 1;
+      for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
+        tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);
+      }
       return;
     }
   }

~~~ step: mark-ptr-avoid-infinite-recursion
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -50,6 +50,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
 
   for (i = 0; i < gc->nslots; i++) {
     if (ptr == gc->items[i].ptr) {
+      if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;
       for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
         tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);

~~~ step: mark-registers
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -78,10 +78,14 @@ static void tgc_mark_stack(tgc_t *gc) {
 }
 
 static void tgc_mark(tgc_t *gc) {
+  jmp_buf env;
+
   void (*volatile mark_stack)(tgc_t*) = tgc_mark_stack;
 
   if (gc->nitems == 0) { return; }
 
+  memset(&env, 0, sizeof(jmp_buf));
+  setjmp(env);
   mark_stack(gc);
 }
 

~~~ step: include-setjmp
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -1,6 +1,7 @@
 #ifndef TGC_H
 #define TGC_H
 
+#include <setjmp.h>
 #include <stdlib.h>
 #include <string.h>
 

~~~ step: add-minptr-maxptr
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -2,6 +2,7 @@
 #define TGC_H
 
 #include <setjmp.h>
+#include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
 
@@ -13,6 +14,7 @@ typedef struct {
 
 typedef struct {
   void *bottom;
+  uintptr_t minptr, maxptr;
   tgc_ptr_t *items;
   size_t nitems, nslots;
 } tgc_t;

~~~ step: init-minptr-maxptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -109,6 +109,8 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->nitems = 0;
   gc->nslots = 0;
   gc->items = NULL;
+  gc->minptr = UINTPTR_MAX;
+  gc->maxptr = 0;
 }
 
 void tgc_stop(tgc_t *gc) {

~~~ step: set-minptr-maxptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -122,6 +122,10 @@ void tgc_stop(tgc_t *gc) {
 
 static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
   gc->nitems++;
+  gc->maxptr = ((uintptr_t)ptr) + size > gc->maxptr ?
+    ((uintptr_t)ptr) + size : gc->maxptr;
+  gc->minptr = ((uintptr_t)ptr)        < gc->minptr ?
+    ((uintptr_t)ptr)        : gc->minptr;
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr, size);

~~~ step: use-minptr-maxptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -48,6 +48,9 @@ static int tgc_resize(tgc_t *gc) {
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   size_t i, k;
 
+  if ((uintptr_t)ptr < gc->minptr
+  ||  (uintptr_t)ptr > gc->maxptr) { return; }
+
   for (i = 0; i < gc->nslots; i++) {
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }

~~~ step: sweep-unmarked
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -99,6 +99,7 @@ static void tgc_sweep(tgc_t *gc) {
 
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) { continue; }
+    if (gc->items[i].mark)        { continue; }
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
     gc->nitems--;

~~~ step: sweep-reset-mark
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -104,6 +104,10 @@ static void tgc_sweep(tgc_t *gc) {
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
     gc->nitems--;
   }
+
+  for (i = 0; i < gc->nslots; i++) {
+    gc->items[i].mark = 0;
+  }
 }
 
 /*** gc control ***/

~~~ step: run-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -21,6 +21,7 @@ typedef struct {
 
 void tgc_start(tgc_t *gc, void *stk);
 void tgc_stop(tgc_t *gc);
+void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);
 

~~~ step: run
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -126,6 +126,11 @@ void tgc_stop(tgc_t *gc) {
   free(gc->items);
 }
 
+void tgc_run(tgc_t *gc) {
+  tgc_mark(gc);
+  tgc_sweep(gc);
+}
+
 /*** allocator functions ***/
 
 static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {

~~~ step: collect-on-alloc
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -142,6 +142,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr, size);
+    tgc_run(gc);
     return ptr;
   } else {
     gc->nitems--;

~~~ step: add-mitems
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -16,7 +16,7 @@ typedef struct {
   void *bottom;
   uintptr_t minptr, maxptr;
   tgc_ptr_t *items;
-  size_t nitems, nslots;
+  size_t nitems, nslots, mitems;
 } tgc_t;
 
 void tgc_start(tgc_t *gc, void *stk);

~~~ step: init-mitems
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -116,6 +116,7 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->bottom = stk;
   gc->nitems = 0;
   gc->nslots = 0;
+  gc->mitems = 0;
   gc->items = NULL;
   gc->minptr = UINTPTR_MAX;
   gc->maxptr = 0;

~~~ step: set-mitems
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -108,6 +108,8 @@ static void tgc_sweep(tgc_t *gc) {
   for (i = 0; i < gc->nslots; i++) {
     gc->items[i].mark = 0;
   }
+
+  gc->mitems = gc->nitems + (gc->nitems / 2) + 1;
 }
 
 /*** gc control ***/

~~~ step: use-mitems
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -145,7 +145,9 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr, size);
-    tgc_run(gc);
+    if (gc->nitems > gc->mitems) {
+      tgc_run(gc);
+    }
     return ptr;
   } else {
     gc->nitems--;

~~~ step: add-sweepfactor
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -16,6 +16,7 @@ typedef struct {
   void *bottom;
   uintptr_t minptr, maxptr;
   tgc_ptr_t *items;
+  double sweepfactor;
   size_t nitems, nslots, mitems;
 } tgc_t;
 

~~~ step: set-sweepfactor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -122,6 +122,7 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->items = NULL;
   gc->minptr = UINTPTR_MAX;
   gc->maxptr = 0;
+  gc->sweepfactor = 0.5;
 }
 
 void tgc_stop(tgc_t *gc) {

~~~ step: use-sweepfactor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -109,7 +109,7 @@ static void tgc_sweep(tgc_t *gc) {
     gc->items[i].mark = 0;
   }
 
-  gc->mitems = gc->nitems + (gc->nitems / 2) + 1;
+  gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
 }
 
 /*** gc control ***/

~~~ step: add-paused
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,6 +14,7 @@ typedef struct {
 
 typedef struct {
   void *bottom;
+  int paused;
   uintptr_t minptr, maxptr;
   tgc_ptr_t *items;
   double sweepfactor;

~~~ step: init-paused
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -116,6 +116,7 @@ static void tgc_sweep(tgc_t *gc) {
 
 void tgc_start(tgc_t *gc, void *stk) {
   gc->bottom = stk;
+  gc->paused = 0;
   gc->nitems = 0;
   gc->nslots = 0;
   gc->mitems = 0;

~~~ step: use-paused
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -147,7 +147,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr, size);
-    if (gc->nitems > gc->mitems) {
+    if (!gc->paused && gc->nitems > gc->mitems) {
       tgc_run(gc);
     }
     return ptr;

~~~ step: pause-resume-prototypes
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -23,6 +23,8 @@ typedef struct {
 
 void tgc_start(tgc_t *gc, void *stk);
 void tgc_stop(tgc_t *gc);
+void tgc_pause(tgc_t *gc);
+void tgc_resume(tgc_t *gc);
 void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);

~~~ step: pause-resume
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -131,6 +131,14 @@ void tgc_stop(tgc_t *gc) {
   free(gc->items);
 }
 
+void tgc_pause(tgc_t *gc) {
+  gc->paused = 1;
+}
+
+void tgc_resume(tgc_t *gc) {
+  gc->paused = 0;
+}
+
 void tgc_run(tgc_t *gc) {
   tgc_mark(gc);
   tgc_sweep(gc);

~~~ step: hash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -2,6 +2,10 @@
 
 /*** pointer table operations ***/
 
+static size_t tgc_hash(void *ptr) {
+  return ((uintptr_t)ptr) >> 3;
+}
+
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
   size_t i;

~~~ step: add-ptr-use-hash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -14,12 +14,15 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   item.mark = 0;
   item.size = size;
 
-  for (i = 0; i < gc->nslots; i++) {
+  i = tgc_hash(ptr) % gc->nslots;
+
+  while (1) {
     if (gc->items[i].ptr == NULL) {
       gc->items[i] = item;
       return;
     }
     if (gc->items[i].ptr == item.ptr) { return; }
+    i = (i+1) % gc->nslots;
   }
 }
 

~~~ step: mark-ptr-use-hash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -53,12 +53,15 @@ static int tgc_resize(tgc_t *gc) {
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i, k;
+  size_t i, j, k;
 
   if ((uintptr_t)ptr < gc->minptr
   ||  (uintptr_t)ptr > gc->maxptr) { return; }
 
-  for (i = 0; i < gc->nslots; i++) {
+  i = tgc_hash(ptr) % gc->nslots; j = 0;
+
+  while (1) {
+    if (j == gc->nslots) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;
@@ -67,6 +70,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
       }
       return;
     }
+    i = (i+1) % gc->nslots; j++;
   }
 }
 

~~~ step: resize-readd-ptrs
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -29,6 +29,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
 /*** resize pointer table ***/
 
 static int tgc_resize(tgc_t *gc) {
+  size_t i;
   tgc_ptr_t *old_items = gc->items;
   size_t old_size = gc->nslots;
 
@@ -43,7 +44,11 @@ static int tgc_resize(tgc_t *gc) {
     return 0;
   }
 
-  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
+  for (i = 0; i < old_size; i++) {
+    if (old_items[i].ptr != NULL) {
+      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size);
+    }
+  }
 
   free(old_items);
 

~~~ step: add-loadfactor
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -17,7 +17,7 @@ typedef struct {
   int paused;
   uintptr_t minptr, maxptr;
   tgc_ptr_t *items;
-  double sweepfactor;
+  double loadfactor, sweepfactor;
   size_t nitems, nslots, mitems;
 } tgc_t;
 

~~~ step: init-loadfactor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -139,6 +139,7 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->items = NULL;
   gc->minptr = UINTPTR_MAX;
   gc->maxptr = 0;
+  gc->loadfactor = 0.9;
   gc->sweepfactor = 0.5;
 }
 

~~~ step: ideal-size
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -28,6 +28,10 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
 
 /*** resize pointer table ***/
 
+static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
+  return (size_t)((double)(size+1) / gc->loadfactor);
+}
+
 static int tgc_resize(tgc_t *gc) {
   size_t i;
   tgc_ptr_t *old_items = gc->items;

~~~ step: resize-more
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -59,6 +59,12 @@ static int tgc_resize(tgc_t *gc) {
   return 1;
 }
 
+static int tgc_resize_more(tgc_t *gc) {
+  size_t new_size = tgc_ideal_size(gc, gc->nitems);
+  size_t old_size = gc->nslots;
+  return (new_size > old_size) ? tgc_rehash(gc, new_size) : 1;
+}
+
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {

~~~ step: rehash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -32,14 +32,12 @@ static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
   return (size_t)((double)(size+1) / gc->loadfactor);
 }
 
-static int tgc_resize(tgc_t *gc) {
+static int tgc_rehash(tgc_t *gc, size_t new_size) {
   size_t i;
   tgc_ptr_t *old_items = gc->items;
   size_t old_size = gc->nslots;
 
-  if (gc->nslots >= gc->nitems) return 1;
-
-  gc->nslots = gc->nitems * 2;
+  gc->nslots = new_size;
   gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
 
   if (gc->items == NULL) {

~~~ step: use-resize-more
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -178,7 +178,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
   gc->minptr = ((uintptr_t)ptr)        < gc->minptr ?
     ((uintptr_t)ptr)        : gc->minptr;
 
-  if (tgc_resize(gc)) {
+  if (tgc_resize_more(gc)) {
     tgc_add_ptr(gc, ptr, size);
     if (!gc->paused && gc->nitems > gc->mitems) {
       tgc_run(gc);

~~~ step: add-primes
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -28,6 +28,19 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
 
 /*** resize pointer table ***/
 
+enum {
+  TGC_PRIMES_COUNT = 24
+};
+
+static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
+  0,       1,       5,       11,
+  23,      53,      101,     197,
+  389,     683,     1259,    2417,
+  4733,    9371,    18617,   37097,
+  74093,   148073,  296099,  592019,
+  1100009, 2200013, 4400021, 8800019
+};
+
 static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
   return (size_t)((double)(size+1) / gc->loadfactor);
 }

~~~ step: use-primes
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -42,7 +42,12 @@ static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
 };
 
 static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
-  return (size_t)((double)(size+1) / gc->loadfactor);
+  size_t i;
+  size = (size_t)((double)(size+1) / gc->loadfactor);
+  for (i = 0; i < TGC_PRIMES_COUNT; i++) {
+    if (tgc_primes[i] >= size) { return tgc_primes[i]; }
+  }
+  return 0;
 }
 
 static int tgc_rehash(tgc_t *gc, size_t new_size) {

~~~ step: fix-large-sizes
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -42,11 +42,15 @@ static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
 };
 
 static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
-  size_t i;
+  size_t i, last;
   size = (size_t)((double)(size+1) / gc->loadfactor);
   for (i = 0; i < TGC_PRIMES_COUNT; i++) {
     if (tgc_primes[i] >= size) { return tgc_primes[i]; }
   }
+  last = tgc_primes[TGC_PRIMES_COUNT-1];
+  for (i = 0;; i++) {
+    if (last * i >= size) { return last * i; }
+  }
   return 0;
 }
 

~~~ step: resize-less
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -85,6 +85,12 @@ static int tgc_resize_more(tgc_t *gc) {
   return (new_size > old_size) ? tgc_rehash(gc, new_size) : 1;
 }
 
+static int tgc_resize_less(tgc_t *gc) {
+  size_t new_size = tgc_ideal_size(gc, gc->nitems);
+  size_t old_size = gc->nslots;
+  return (new_size < old_size) ? tgc_rehash(gc, new_size) : 1;
+}
+
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {

~~~ step: call-resize-less
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -161,6 +161,8 @@ static void tgc_sweep(tgc_t *gc) {
     gc->items[i].mark = 0;
   }
 
+  tgc_resize_less(gc);
+
   gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
 }
 

~~~ step: sweep-while-loop
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -149,9 +149,10 @@ static void tgc_sweep(tgc_t *gc) {
 
   if (gc->nitems == 0) { return; }
 
-  for (i = 0; i < gc->nslots; i++) {
-    if (gc->items[i].ptr == NULL) { continue; }
-    if (gc->items[i].mark)        { continue; }
+  i = 0;
+  while (i < gc->nslots) {
+    if (gc->items[i].ptr == NULL) { i++; continue; }
+    if (gc->items[i].mark)        { i++; continue; }
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
     gc->nitems--;

~~~ step: linear-probing-invariant
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -145,7 +145,7 @@ static void tgc_mark(tgc_t *gc) {
 }
 
 static void tgc_sweep(tgc_t *gc) {
-  size_t i;
+  size_t i, j, nj, nh;
 
   if (gc->nitems == 0) { return; }
 
@@ -153,8 +153,22 @@ static void tgc_sweep(tgc_t *gc) {
   while (i < gc->nslots) {
     if (gc->items[i].ptr == NULL) { i++; continue; }
     if (gc->items[i].mark)        { i++; continue; }
+
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+
+    j = i;
+    while (1) {
+      nj = (j+1) % gc->nslots;
+      nh = tgc_hash(gc->items[nj].ptr);
+      if (gc->items[nj].ptr != NULL && nh != i) {
+        memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
+        memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
+        j = nj;
+      } else {
+        break;
+      }
+    }
     gc->nitems--;
   }
 

~~~ step: mark-ptr-stop-search-early
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -102,7 +102,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   i = tgc_hash(ptr) % gc->nslots; j = 0;
 
   while (1) {
-    if (j == gc->nslots) { return; }
+    if (gc->items[i].ptr == NULL || j == gc->nslots) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;

~~~ step: add-hash
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -9,7 +9,7 @@
 typedef struct {
   void *ptr;
   int mark;
-  size_t size;
+  size_t size, hash;
 } tgc_ptr_t;
 
 typedef struct {

~~~ step: set-hash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -13,6 +13,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   item.ptr = ptr;
   item.mark = 0;
   item.size = size;
+  item.hash = i+1;
 
   i = tgc_hash(ptr) % gc->nslots;
 

~~~ step: add-ptr-hash-zero
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -8,7 +8,7 @@ static size_t tgc_hash(void *ptr) {
 
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
-  size_t i;
+  size_t i, h;
 
   item.ptr = ptr;
   item.mark = 0;
@@ -18,10 +18,8 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   i = tgc_hash(ptr) % gc->nslots;
 
   while (1) {
-    if (gc->items[i].ptr == NULL) {
-      gc->items[i] = item;
-      return;
-    }
+    h = gc->items[i].hash;
+    if (h == 0) { gc->items[i] = item; return; }
     if (gc->items[i].ptr == item.ptr) { return; }
     i = (i+1) % gc->nslots;
   }

~~~ step: rehash-hash-zero
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -68,7 +68,7 @@ static int tgc_rehash(tgc_t *gc, size_t new_size) {
   }
 
   for (i = 0; i < old_size; i++) {
-    if (old_items[i].ptr != NULL) {
+    if (old_items[i].hash != 0) {
       tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size);
     }
   }

~~~ step: mark-ptr-hash-zero
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -93,7 +93,7 @@ static int tgc_resize_less(tgc_t *gc) {
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i, j, k;
+  size_t i, j, h, k;
 
   if ((uintptr_t)ptr < gc->minptr
   ||  (uintptr_t)ptr > gc->maxptr) { return; }
@@ -101,7 +101,8 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   i = tgc_hash(ptr) % gc->nslots; j = 0;
 
   while (1) {
-    if (gc->items[i].ptr == NULL || j == gc->nslots) { return; }
+    h = gc->items[i].hash;
+    if (h == 0 || j == gc->nslots) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;

~~~ step: sweep-hash-zero
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -151,8 +151,8 @@ static void tgc_sweep(tgc_t *gc) {
 
   i = 0;
   while (i < gc->nslots) {
-    if (gc->items[i].ptr == NULL) { i++; continue; }
-    if (gc->items[i].mark)        { i++; continue; }
+    if (gc->items[i].hash == 0) { i++; continue; }
+    if (gc->items[i].mark)      { i++; continue; }
 
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
@@ -160,8 +160,8 @@ static void tgc_sweep(tgc_t *gc) {
     j = i;
     while (1) {
       nj = (j+1) % gc->nslots;
-      nh = tgc_hash(gc->items[nj].ptr);
-      if (gc->items[nj].ptr != NULL && nh != i) {
+      nh = gc->items[nj].hash;
+      if (nh != 0 && nh-1 != i) {
         memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
         memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
         j = nj;

~~~ step: probe
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -6,6 +6,12 @@ static size_t tgc_hash(void *ptr) {
   return ((uintptr_t)ptr) >> 3;
 }
 
+static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
+  long v = i - (h-1);
+  if (v < 0) { v = gc->nslots + v; }
+  return v;
+}
+
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
   size_t i, h;

~~~ step: add-ptr-count-iterations
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -14,20 +14,20 @@ static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
 
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
-  size_t i, h;
+  size_t i, j, h;
 
   item.ptr = ptr;
   item.mark = 0;
   item.size = size;
   item.hash = i+1;
 
-  i = tgc_hash(ptr) % gc->nslots;
+  i = tgc_hash(ptr) % gc->nslots; j = 0;
 
   while (1) {
     h = gc->items[i].hash;
     if (h == 0) { gc->items[i] = item; return; }
     if (gc->items[i].ptr == item.ptr) { return; }
-    i = (i+1) % gc->nslots;
+    i = (i+1) % gc->nslots; j++;
   }
 }
 

~~~ step: add-ptr-probe
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -14,7 +14,7 @@ static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
 
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
-  size_t i, j, h;
+  size_t i, j, h, p;
 
   item.ptr = ptr;
   item.mark = 0;
@@ -27,6 +27,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
     h = gc->items[i].hash;
     if (h == 0) { gc->items[i] = item; return; }
     if (gc->items[i].ptr == item.ptr) { return; }
+    p = tgc_probe(gc, i, h);
     i = (i+1) % gc->nslots; j++;
   }
 }

~~~ step: add-ptr-robin-hood
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -13,7 +13,7 @@ static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
 }
 
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
-  tgc_ptr_t item;
+  tgc_ptr_t item, tmp;
   size_t i, j, h, p;
 
   item.ptr = ptr;
@@ -28,6 +28,12 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
     if (h == 0) { gc->items[i] = item; return; }
     if (gc->items[i].ptr == item.ptr) { return; }
     p = tgc_probe(gc, i, h);
+    if (j >= p) {
+      tmp = gc->items[i];
+      gc->items[i] = item;
+      item = tmp;
+      j = p;
+    }
     i = (i+1) % gc->nslots; j++;
   }
 }

~~~ step: mark-ptr-robin-hood
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -115,7 +115,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
 
   while (1) {
     h = gc->items[i].hash;
-    if (h == 0 || j == gc->nslots) { return; }
+    if (h == 0 || j > tgc_probe(gc, i, h)) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;

~~~ step: sweep-robin-hood
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -174,7 +174,7 @@ static void tgc_sweep(tgc_t *gc) {
     while (1) {
       nj = (j+1) % gc->nslots;
       nh = gc->items[nj].hash;
-      if (nh != 0 && nh-1 != i) {
+      if (nh != 0 && tgc_probe(gc, nj, nh) > 0) {
         memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
         memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
         j = nj;

~~~ step: change-mark-to-flags
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -6,9 +6,13 @@
 #include <stdlib.h>
 #include <string.h>
 
+enum {
+  TGC_MARK = 0x01
+};
+
 typedef struct {
   void *ptr;
-  int mark;
+  int flags;
   size_t size, hash;
 } tgc_ptr_t;
 

~~~ step: add-ptr-flags
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -12,12 +12,12 @@ static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
   return v;
 }
 
-static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
+static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size, int flags) {
   tgc_ptr_t item, tmp;
   size_t i, j, h, p;
 
   item.ptr = ptr;
-  item.mark = 0;
+  item.flags = flags;
   item.size = size;
   item.hash = i+1;
 

~~~ step: rehash-flags
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -82,7 +82,7 @@ static int tgc_rehash(tgc_t *gc, size_t new_size) {
 
   for (i = 0; i < old_size; i++) {
     if (old_items[i].hash != 0) {
-      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size);
+      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size, old_items[i].flags);
     }
   }
 

~~~ step: add-flags
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -229,7 +229,7 @@ void tgc_run(tgc_t *gc) {
 
 /*** allocator functions ***/
 
-static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
+static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
   gc->nitems++;
   gc->maxptr = ((uintptr_t)ptr) + size > gc->maxptr ?
     ((uintptr_t)ptr) + size : gc->maxptr;
@@ -237,7 +237,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
     ((uintptr_t)ptr)        : gc->minptr;
 
   if (tgc_resize_more(gc)) {
-    tgc_add_ptr(gc, ptr, size);
+    tgc_add_ptr(gc, ptr, size, flags);
     if (!gc->paused && gc->nitems > gc->mitems) {
       tgc_run(gc);
     }

~~~ step: zero-flags
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -252,7 +252,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
   if (ptr != NULL) {
-    ptr = tgc_add(gc, ptr, size);
+    ptr = tgc_add(gc, ptr, size, 0);
   }
   return ptr;
 }

~~~ step: mark-ptr-flags
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -117,8 +117,8 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
     h = gc->items[i].hash;
     if (h == 0 || j > tgc_probe(gc, i, h)) { return; }
     if (ptr == gc->items[i].ptr) {
-      if (gc->items[i].mark) { return; }
-      gc->items[i].mark = 1;
+      if (gc->items[i].flags & TGC_MARK) { return; }
+      gc->items[i].flags |= TGC_MARK;
       for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
         tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);
       }

~~~ step: sweep-flags
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -164,8 +164,8 @@ static void tgc_sweep(tgc_t *gc) {
 
   i = 0;
   while (i < gc->nslots) {
-    if (gc->items[i].hash == 0) { i++; continue; }
-    if (gc->items[i].mark)      { i++; continue; }
+    if (gc->items[i].hash ==        0) { i++; continue; }
+    if (gc->items[i].flags & TGC_MARK) { i++; continue; }
 
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));

~~~ step: sweep-reset-mark-flag
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -186,7 +186,7 @@ static void tgc_sweep(tgc_t *gc) {
   }
 
   for (i = 0; i < gc->nslots; i++) {
-    gc->items[i].mark = 0;
+    gc->items[i].flags &= ~TGC_MARK;
   }
 
   tgc_resize_less(gc);

~~~ step: add-root-flag
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -7,7 +7,8 @@
 #include <string.h>
 
 enum {
-  TGC_MARK = 0x01
+  TGC_MARK = 0x01,
+  TGC_ROOT = 0x02
 };
 
 typedef struct {

~~~ step: mark-roots
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -146,12 +146,24 @@ static void tgc_mark_stack(tgc_t *gc) {
 }
 
 static void tgc_mark(tgc_t *gc) {
+  size_t i, k;
   jmp_buf env;
 
   void (*volatile mark_stack)(tgc_t*) = tgc_mark_stack;
 
   if (gc->nitems == 0) { return; }
 
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].hash ==        0) { continue; }
+    if (gc->items[i].flags & TGC_MARK) { continue; }
+    if (gc->items[i].flags & TGC_ROOT) {
+      gc->items[i].flags |= TGC_MARK;
+      for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
+        tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);
+      }
+    }
+  }
+
   memset(&env, 0, sizeof(jmp_buf));
   setjmp(env);
   mark_stack(gc);

~~~ step: sweep-skip-roots
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -178,6 +178,7 @@ static void tgc_sweep(tgc_t *gc) {
   while (i < gc->nslots) {
     if (gc->items[i].hash ==        0) { i++; continue; }
     if (gc->items[i].flags & TGC_MARK) { i++; continue; }
+    if (gc->items[i].flags & TGC_ROOT) { i++; continue; }
 
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));

~~~ step: alloc-opt-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -34,4 +34,6 @@ void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);
 
+void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags);
+
 #endif

~~~ step: alloc-opt
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -262,10 +262,10 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
   }
 }
 
-void *tgc_alloc(tgc_t *gc, size_t size) {
+void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags) {
   void *ptr = malloc(size);
   if (ptr != NULL) {
-    ptr = tgc_add(gc, ptr, size, 0);
+    ptr = tgc_add(gc, ptr, size, flags);
   }
   return ptr;
 }

~~~ step: alloc-delegates
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -262,6 +262,10 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
   }
 }
 
+void *tgc_alloc(tgc_t *gc, size_t size) {
+  return tgc_alloc_opt(gc, size, 0);
+}
+
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags) {
   void *ptr = malloc(size);
   if (ptr != NULL) {

~~~ step: get-set-flags-prototypes
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -36,4 +36,7 @@ void *tgc_alloc(tgc_t *gc, size_t size);
 
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags);
 
+int tgc_get_flags(tgc_t *gc, void *ptr);
+int tgc_set_flags(tgc_t *gc, void *ptr, int flags);
+
 #endif

~~~ step: get-set-flags
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -273,3 +273,16 @@ void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags) {
   }
   return ptr;
 }
+
+/*** getters and setters ***/
+
+int tgc_get_flags(tgc_t *gc, void *ptr) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) { return p->flags; }
+  return 0;
+}
+
+void tgc_set_flags(tgc_t *gc, void *ptr, int flags) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) { p->flags = flags; }
+}

~~~ step: get-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -12,6 +12,18 @@ static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
   return v;
 }
 
+static tgc_ptr_t *tgc_get_ptr(tgc_t *gc, void *ptr) {
+  size_t i, j, h;
+  i = tgc_hash(ptr) % gc->nslots; j = 0;
+  while (1) {
+    h = gc->items[i].hash;
+    if (h == 0 || j > tgc_probe(gc, i, h)) { return NULL; }
+    if (gc->items[i].ptr == ptr) { return &gc->items[i]; }
+    i = (i+1) % gc->nslots; j++;
+  }
+  return NULL;
+}
+
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size, int flags) {
   tgc_ptr_t item, tmp;
   size_t i, j, h, p;

~~~ step: get-size-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -38,5 +38,6 @@ void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags);
 
 int tgc_get_flags(tgc_t *gc, void *ptr);
 int tgc_set_flags(tgc_t *gc, void *ptr, int flags);
+size_t tgc_get_size(tgc_t *gc, void *ptr);
 
 #endif

~~~ step: get-size
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -298,3 +298,9 @@ void tgc_set_flags(tgc_t *gc, void *ptr, int flags) {
   tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
   if (p) { p->flags = flags; }
 }
+
+size_t tgc_get_size(tgc_t *gc, void *ptr) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) { return p->size; }
+  return 0;
+}

~~~ step: add-leaf-flag
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -8,7 +8,8 @@
 
 enum {
   TGC_MARK = 0x01,
-  TGC_ROOT = 0x02
+  TGC_ROOT = 0x02,
+  TGC_LEAF = 0x04
 };
 
 typedef struct {

~~~ step: mark-ptr-leaf
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -131,6 +131,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].flags & TGC_MARK) { return; }
       gc->items[i].flags |= TGC_MARK;
+      if (gc->items[i].flags & TGC_LEAF) { return; }
       for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
         tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);
       }

~~~ step: mark-leaf
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -171,6 +171,7 @@ static void tgc_mark(tgc_t *gc) {
     if (gc->items[i].flags & TGC_MARK) { continue; }
     if (gc->items[i].flags & TGC_ROOT) {
       gc->items[i].flags |= TGC_MARK;
+      if (gc->items[i].flags & TGC_LEAF) { continue; }
       for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
         tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);
       }

~~~ step: add-dtor
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -16,6 +16,7 @@ typedef struct {
   void *ptr;
   int flags;
   size_t size, hash;
+  void (*dtor)(void*);
 } tgc_ptr_t;
 
 typedef struct {

~~~ step: alloc-opt-dtor-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -36,7 +36,7 @@ void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);
 
-void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags);
+void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*));
 
 int tgc_get_flags(tgc_t *gc, void *ptr);
 int tgc_set_flags(tgc_t *gc, void *ptr, int flags);

~~~ step: alloc-opt-dtor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -280,10 +280,10 @@ void *tgc_alloc(tgc_t *gc, size_t size) {
   return tgc_alloc_opt(gc, size, 0);
 }
 
-void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags) {
+void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*)) {
   void *ptr = malloc(size);
   if (ptr != NULL) {
-    ptr = tgc_add(gc, ptr, size, flags);
+    ptr = tgc_add(gc, ptr, size, flags, dtor);
   }
   return ptr;
 }

~~~ step: alloc-dtor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -277,7 +277,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
 }
 
 void *tgc_alloc(tgc_t *gc, size_t size) {
-  return tgc_alloc_opt(gc, size, 0);
+  return tgc_alloc_opt(gc, size, 0, NULL);
 }
 
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*)) {

~~~ step: add-pass-dtor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -256,7 +256,10 @@ void tgc_run(tgc_t *gc) {
 
 /*** allocator functions ***/
 
-static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
+static void *tgc_add(
+  tgc_t *gc, void *ptr, size_t size,
+  int flags, void(*dtor)(void*)
+) {
   gc->nitems++;
   gc->maxptr = ((uintptr_t)ptr) + size > gc->maxptr ?
     ((uintptr_t)ptr) + size : gc->maxptr;
@@ -264,7 +267,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
     ((uintptr_t)ptr)        : gc->minptr;
 
   if (tgc_resize_more(gc)) {
-    tgc_add_ptr(gc, ptr, size, flags);
+    tgc_add_ptr(gc, ptr, size, flags, dtor);
     if (!gc->paused && gc->nitems > gc->mitems) {
       tgc_run(gc);
     }

~~~ step: set-dtor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -24,7 +24,10 @@ static tgc_ptr_t *tgc_get_ptr(tgc_t *gc, void *ptr) {
   return NULL;
 }
 
-static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size, int flags) {
+static void tgc_add_ptr(
+  tgc_t *gc, void *ptr, size_t size,
+  int flags, void(*dtor)(void*)
+) {
   tgc_ptr_t item, tmp;
   size_t i, j, h, p;
 
@@ -32,6 +35,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size, int flags) {
   item.flags = flags;
   item.size = size;
   item.hash = i+1;
+  item.dtor = dtor;
 
   i = tgc_hash(ptr) % gc->nslots; j = 0;
 

~~~ step: rehash-dtor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -98,7 +98,9 @@ static int tgc_rehash(tgc_t *gc, size_t new_size) {
 
   for (i = 0; i < old_size; i++) {
     if (old_items[i].hash != 0) {
-      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size, old_items[i].flags);
+      tgc_add_ptr(gc,
+        old_items[i].ptr, old_items[i].size,
+        old_items[i].flags, old_items[i].dtor);
     }
   }
 

~~~ step: get-set-dtor-prototypes
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -40,6 +40,8 @@ void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*));
 
 int tgc_get_flags(tgc_t *gc, void *ptr);
 int tgc_set_flags(tgc_t *gc, void *ptr, int flags);
+void(*tgc_get_dtor(tgc_t *gc, void *ptr))(void*);
+void tgc_set_dtor(tgc_t *gc, void *ptr, void(*dtor)(void*));
 size_t tgc_get_size(tgc_t *gc, void *ptr);
 
 #endif

~~~ step: get-set-dtor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -310,6 +310,17 @@ void tgc_set_flags(tgc_t *gc, void *ptr, int flags) {
   if (p) { p->flags = flags; }
 }
 
+void(*tgc_get_dtor(tgc_t *gc, void *ptr))(void*) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) { return p->dtor; }
+  return NULL;
+}
+
+void tgc_set_dtor(tgc_t *gc, void *ptr, void(*dtor)(void*)) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) { p->dtor = dtor; }
+}
+
 size_t tgc_get_size(tgc_t *gc, void *ptr) {
   tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
   if (p) { return p->size; }

~~~ step: add-frees
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -23,9 +23,9 @@ typedef struct {
   void *bottom;
   int paused;
   uintptr_t minptr, maxptr;
-  tgc_ptr_t *items;
+  tgc_ptr_t *items, *frees;
   double loadfactor, sweepfactor;
-  size_t nitems, nslots, mitems;
+  size_t nitems, nslots, mitems, nfrees;
 } tgc_t;
 
 void tgc_start(tgc_t *gc, void *stk);

~~~ step: init-frees
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -235,7 +235,9 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->nitems = 0;
   gc->nslots = 0;
   gc->mitems = 0;
+  gc->nfrees = 0;
   gc->items = NULL;
+  gc->frees = NULL;
   gc->minptr = UINTPTR_MAX;
   gc->maxptr = 0;
   gc->loadfactor = 0.9;

~~~ step: stop-frees
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -247,6 +247,7 @@ void tgc_start(tgc_t *gc, void *stk) {
 void tgc_stop(tgc_t *gc) {
   tgc_sweep(gc);
   free(gc->items);
+  free(gc->frees);
 }
 
 void tgc_pause(tgc_t *gc) {

~~~ step: sweep-count-frees
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -194,6 +194,14 @@ static void tgc_sweep(tgc_t *gc) {
 
   if (gc->nitems == 0) { return; }
 
+  gc->nfrees = 0;
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].hash ==        0) { continue; }
+    if (gc->items[i].flags & TGC_MARK) { continue; }
+    if (gc->items[i].flags & TGC_ROOT) { continue; }
+    gc->nfrees++;
+  }
+
   i = 0;
   while (i < gc->nslots) {
     if (gc->items[i].hash ==        0) { i++; continue; }

~~~ step: sweep-alloc-frees
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -202,6 +202,9 @@ static void tgc_sweep(tgc_t *gc) {
     gc->nfrees++;
   }
 
+  gc->frees = realloc(gc->frees, sizeof(tgc_ptr_t) * gc->nfrees);
+  if (gc->frees == NULL) { return; }
+
   i = 0;
   while (i < gc->nslots) {
     if (gc->items[i].hash ==        0) { i++; continue; }

~~~ step: sweep-add-to-frees
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -190,7 +190,7 @@ static void tgc_mark(tgc_t *gc) {
 }
 
 static void tgc_sweep(tgc_t *gc) {
-  size_t i, j, nj, nh;
+  size_t i, j, k, nj, nh;
 
   if (gc->nitems == 0) { return; }
 
@@ -205,13 +205,13 @@ static void tgc_sweep(tgc_t *gc) {
   gc->frees = realloc(gc->frees, sizeof(tgc_ptr_t) * gc->nfrees);
   if (gc->frees == NULL) { return; }
 
-  i = 0;
+  i = 0; k = 0;
   while (i < gc->nslots) {
     if (gc->items[i].hash ==        0) { i++; continue; }
     if (gc->items[i].flags & TGC_MARK) { i++; continue; }
     if (gc->items[i].flags & TGC_ROOT) { i++; continue; }
 
-    free(gc->items[i].ptr);
+    gc->frees[k] = gc->items[i]; k++;
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
 
     j = i;

~~~ step: sweep-free-frees
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -236,6 +236,11 @@ static void tgc_sweep(tgc_t *gc) {
   tgc_resize_less(gc);
 
   gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
+
+  for (i = 0; i < gc->nfrees; i++) {
+    if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
+    free(gc->frees[i].ptr);
+  }
 }
 
 /*** gc control ***/

~~~ step: sweep-cleanup-frees
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -241,6 +241,10 @@ static void tgc_sweep(tgc_t *gc) {
     if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
     free(gc->frees[i].ptr);
   }
+
+  free(gc->frees);
+  gc->frees = NULL;
+  gc->nfrees = 0;
 }
 
 /*** gc control ***/

~~~ step: calloc-prototypes
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -35,8 +35,11 @@ void tgc_resume(tgc_t *gc);
 void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);
+void *tgc_calloc(tgc_t *gc, size_t num, size_t size);
 
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*));
+void *tgc_calloc_opt(tgc_t *gc, size_t num, size_t size, int flags,
+                     void(*dtor)(void*));
 
 int tgc_get_flags(tgc_t *gc, void *ptr);
 int tgc_set_flags(tgc_t *gc, void *ptr, int flags);

~~~ step: calloc-opt
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -320,6 +320,17 @@ void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*)) {
   return ptr;
 }
 
+void *tgc_calloc_opt(
+  tgc_t *gc, size_t num, size_t size,
+  int flags, void(*dtor)(void*)
+) {
+  void *ptr = calloc(num, size);
+  if (ptr != NULL) {
+    ptr = tgc_add(gc, ptr, num * size, flags, dtor);
+  }
+  return ptr;
+}
+
 /*** getters and setters ***/
 
 int tgc_get_flags(tgc_t *gc, void *ptr) {

~~~ step: calloc
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -312,6 +312,10 @@ void *tgc_alloc(tgc_t *gc, size_t size) {
   return tgc_alloc_opt(gc, size, 0, NULL);
 }
 
+void *tgc_calloc(tgc_t *gc, size_t num, size_t size) {
+  return tgc_calloc_opt(gc, num, size, 0, NULL);
+}
+
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*)) {
   void *ptr = malloc(size);
   if (ptr != NULL) {

~~~ step: realloc-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -36,6 +36,7 @@ void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);
 void *tgc_calloc(tgc_t *gc, size_t num, size_t size);
+void *tgc_realloc(tgc_t *gc, void *ptr, size_t size);
 
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*));
 void *tgc_calloc_opt(tgc_t *gc, size_t num, size_t size, int flags,

~~~ step: realloc
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -316,6 +316,28 @@ void *tgc_calloc(tgc_t *gc, size_t num, size_t size) {
   return tgc_calloc_opt(gc, num, size, 0, NULL);
 }
 
+void *tgc_realloc(tgc_t *gc, void *ptr, size_t size) {
+  tgc_ptr_t *p;
+  void *qtr = realloc(ptr, size);
+
+  p = tgc_get_ptr(gc, ptr);
+
+  if (p && qtr == ptr) {
+    p->size = size;
+    return qtr;
+  }
+
+  if (p && qtr != ptr) {
+    int flags = p->flags;
+    void(*dtor)(void*) = p->dtor;
+    tgc_rem(gc, ptr);
+    tgc_add(gc, qtr, size, flags, dtor);
+    return qtr;
+  }
+
+  return NULL;
+}
+
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*)) {
   void *ptr = malloc(size);
   if (ptr != NULL) {

~~~ step: rem
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -308,6 +308,12 @@ static void *tgc_add(
   }
 }
 
+static void tgc_rem(tgc_t *gc, void *ptr) {
+  tgc_rem_ptr(gc, ptr);
+  tgc_resize_less(gc);
+  gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
+}
+
 void *tgc_alloc(tgc_t *gc, size_t size) {
   return tgc_alloc_opt(gc, size, 0, NULL);
 }

~~~ step: rem-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -54,6 +54,25 @@ static void tgc_add_ptr(
   }
 }
 
+static void tgc_rem_ptr(tgc_t *gc, void *ptr) {
+  size_t i, j, h;
+
+  if (gc->nitems == 0) { return; }
+
+  i = tgc_hash(ptr) % gc->nslots; j = 0;
+
+  while (1) {
+    h = gc->items[i].hash;
+    if (h == 0 || j > tgc_probe(gc, i, h)) { return; }
+    if (gc->items[i].ptr == ptr) {
+      memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+      gc->nitems--;
+      return;
+    }
+    i = (i+1) % gc->nslots; j++;
+  }
+}
+
 /*** resize pointer table ***/
 
 enum {

~~~ step: rem-ptr-linear-probing-invariant
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -55,7 +55,7 @@ static void tgc_add_ptr(
 }
 
 static void tgc_rem_ptr(tgc_t *gc, void *ptr) {
-  size_t i, j, h;
+  size_t i, j, h, nj, nh;
 
   if (gc->nitems == 0) { return; }
 
@@ -66,6 +66,18 @@ static void tgc_rem_ptr(tgc_t *gc, void *ptr) {
     if (h == 0 || j > tgc_probe(gc, i, h)) { return; }
     if (gc->items[i].ptr == ptr) {
       memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+      j = i;
+      while (1) {
+        nj = (j+1) % gc->nslots;
+        nh = gc->items[nj].hash;
+        if (nh != 0 && tgc_probe(gc, nj, nh) > 0) {
+          memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
+          memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
+          j = nj;
+        } else {
+          break;
+        }
+      }
       gc->nitems--;
       return;
     }

~~~ step: realloc-handle-realloc-failure
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -357,6 +357,11 @@ void *tgc_realloc(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t *p;
   void *qtr = realloc(ptr, size);
 
+  if (qtr == NULL) {
+    tgc_rem(gc, ptr);
+    return qtr;
+  }
+
   p = tgc_get_ptr(gc, ptr);
 
   if (p && qtr == ptr) {

~~~ step: realloc-handle-null
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -362,6 +362,11 @@ void *tgc_realloc(tgc_t *gc, void *ptr, size_t size) {
     return qtr;
   }
 
+  if (ptr == NULL) {
+    tgc_add(gc, qtr, size, 0, NULL);
+    return qtr;
+  }
+
   p = tgc_get_ptr(gc, ptr);
 
   if (p && qtr == ptr) {

~~~ step: free-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -37,6 +37,7 @@ void tgc_run(tgc_t *gc);
 void *tgc_alloc(tgc_t *gc, size_t size);
 void *tgc_calloc(tgc_t *gc, size_t num, size_t size);
 void *tgc_realloc(tgc_t *gc, void *ptr, size_t size);
+void tgc_free(tgc_t *gc, void *ptr);
 
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*));
 void *tgc_calloc_opt(tgc_t *gc, size_t num, size_t size, int flags,

~~~ step: free
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -385,6 +385,17 @@ void *tgc_realloc(tgc_t *gc, void *ptr, size_t size) {
   return NULL;
 }
 
+void tgc_free(tgc_t *gc, void *ptr) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) {
+    if (p->dtor) {
+      p->dtor(ptr);
+    }
+    free(ptr);
+    tgc_rem(gc, ptr);
+  }
+}
+
 void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void(*dtor)(void*)) {
   void *ptr = malloc(size);
   if (ptr != NULL) {

~~~ step: rem-ptr-frees-null
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -59,6 +59,10 @@ static void tgc_rem_ptr(tgc_t *gc, void *ptr) {
 
   if (gc->nitems == 0) { return; }
 
+  for (i = 0; i < gc->nfrees; i++) {
+    if (gc->frees[i].ptr == ptr) { gc->frees[i].ptr = NULL; }
+  }
+
   i = tgc_hash(ptr) % gc->nslots; j = 0;
 
   while (1) {

~~~ step: sweep-check-frees-for-null
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -273,8 +273,10 @@ static void tgc_sweep(tgc_t *gc) {
   gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
 
   for (i = 0; i < gc->nfrees; i++) {
-    if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
-    free(gc->frees[i].ptr);
+    if (gc->frees[i].ptr) {
+      if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
+      free(gc->frees[i].ptr);
+    }
   }
 
   free(gc->frees);

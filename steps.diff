~~~ step: header-file
diff --git a/tgc.h b/tgc.h
new file mode 100644
--- /dev/null
+++ b/tgc.h
@@ -0,0 +1,8 @@
+#ifndef TGC_H
+#define TGC_H
+
+#include <stdlib.h>
+
+void *tgc_alloc(size_t size);
+
+#endif

~~~ step: alloc
diff --git a/tgc.c b/tgc.c
new file mode 100644
--- /dev/null
+++ b/tgc.c
@@ -0,0 +1,8 @@
+#include "tgc.h"
+
+/*** public api ***/
+
+void *tgc_alloc(size_t size) {
+  void *ptr = malloc(size);
+  return ptr;
+}

~~~ step: pointer-type
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -3,6 +3,10 @@
 
 #include <stdlib.h>
 
+typedef struct {
+  void *ptr;
+} tgc_ptr_t;
+
 void *tgc_alloc(size_t size);
 
 #endif

~~~ step: gc-struct
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -7,6 +7,11 @@ typedef struct {
   void *ptr;
 } tgc_ptr_t;
 
+typedef struct {
+  tgc_ptr_t *items;
+  size_t nitems, nslots;
+} tgc_t;
+
 void *tgc_alloc(size_t size);
 
 #endif

~~~ step: start-prototype
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -2,6 +2,12 @@
 
 /*** public api ***/
 
+void tgc_start(tgc_t *gc) {
+  gc->nitems = 0;
+  gc->nslots = 0;
+  gc->items = NULL;
+}
+
 void *tgc_alloc(size_t size) {
   void *ptr = malloc(size);
   return ptr;
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -12,6 +12,8 @@ typedef struct {
   size_t nitems, nslots;
 } tgc_t;
 
+void tgc_start(tgc_t *gc);
+
 void *tgc_alloc(size_t size);
 
 #endif

~~~ step: pass-gc-to-alloc
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,6 +14,6 @@ typedef struct {
 
 void tgc_start(tgc_t *gc);
 
-void *tgc_alloc(size_t size);
+void *tgc_alloc(tgc_t *gc, size_t size);
 
 #endif

~~~ step: pass-gc-to-alloc-impl
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -8,7 +8,7 @@ void tgc_start(tgc_t *gc) {
   gc->items = NULL;
 }
 
-void *tgc_alloc(size_t size) {
+void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
   return ptr;
 }

~~~ step: call-add
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -1,5 +1,29 @@
 #include "tgc.h"
 
+/*** pointer table ***/
+
+static int tgc_resize(tgc_t *gc) {
+  tgc_ptr_t *old_items = gc->items;
+  size_t old_size = gc->nslots;
+
+  if (gc->nslots >= gc->nitems) return 1;
+
+  gc->nslots = gc->nitems * 2;
+  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
+
+  if (gc->items == NULL) {
+    gc->nslots = old_size;
+    gc->items = old_items;
+    return 0;
+  }
+
+  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
+
+  free(old_items);
+
+  return 1;
+}
+
 /*** public api ***/
 
 void tgc_start(tgc_t *gc) {
@@ -8,7 +32,23 @@ void tgc_start(tgc_t *gc) {
   gc->items = NULL;
 }
 
+static void *tgc_add(tgc_t *gc, void *ptr) {
+  gc->nitems++;
+
+  if (tgc_resize(gc)) {
+    tgc_add_ptr(gc, ptr);
+    return ptr;
+  } else {
+    gc->nitems--;
+    free(ptr);
+    return NULL;
+  }
+}
+
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
+  if (ptr != NULL) {
+    ptr = tgc_add(gc, ptr);
+  }
   return ptr;
 }

~~~ step: include-string
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -2,6 +2,20 @@
 
 /*** pointer table ***/
 
+static void tgc_add_ptr(tgc_t *gc, void *ptr) {
+  tgc_ptr_t item;
+  size_t i;
+
+  item.ptr = ptr;
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].ptr == NULL) {
+      gc->items[i] = item;
+      return;
+    }
+  }
+}
+
 static int tgc_resize(tgc_t *gc) {
   tgc_ptr_t *old_items = gc->items;
   size_t old_size = gc->nslots;
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -2,6 +2,7 @@
 #define TGC_H
 
 #include <stdlib.h>
+#include <string.h>
 
 typedef struct {
   void *ptr;

~~~ step: run-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,6 +14,7 @@ typedef struct {
 } tgc_t;
 
 void tgc_start(tgc_t *gc);
+void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);
 

~~~ step: call-sweep
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -38,6 +38,19 @@ static int tgc_resize(tgc_t *gc) {
   return 1;
 }
 
+/*** mark and sweep ***/
+
+void tgc_sweep(tgc_t *gc) {
+  size_t i;
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].ptr == NULL) { continue; }
+    free(gc->items[i].ptr);
+    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+    gc->nitems--;
+  }
+}
+
 /*** public api ***/
 
 void tgc_start(tgc_t *gc) {
@@ -46,6 +59,10 @@ void tgc_start(tgc_t *gc) {
   gc->items = NULL;
 }
 
+void tgc_run(tgc_t *gc) {
+  tgc_sweep(gc);
+}
+
 static void *tgc_add(tgc_t *gc, void *ptr) {
   gc->nitems++;
 

~~~ step: stop-prototype
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,6 +14,7 @@ typedef struct {
 } tgc_t;
 
 void tgc_start(tgc_t *gc);
+void tgc_stop(tgc_t *gc);
 void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);

~~~ step: stop
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -59,6 +59,11 @@ void tgc_start(tgc_t *gc) {
   gc->items = NULL;
 }
 
+void tgc_stop(tgc_t *gc) {
+  tgc_sweep(gc);
+  free(gc->items);
+}
+
 void tgc_run(tgc_t *gc) {
   tgc_sweep(gc);
 }

~~~ step: add-mark
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -7,6 +7,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr) {
   size_t i;
 
   item.ptr = ptr;
+  item.mark = 0;
 
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) {
@@ -40,6 +41,17 @@ static int tgc_resize(tgc_t *gc) {
 
 /*** mark and sweep ***/
 
+static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
+  size_t i;
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (ptr == gc->items[i].ptr) {
+      gc->items[i].mark = 1;
+      return;
+    }
+  }
+}
+
 void tgc_sweep(tgc_t *gc) {
   size_t i;
 
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -6,6 +6,7 @@
 
 typedef struct {
   void *ptr;
+  int mark;
 } tgc_ptr_t;
 
 typedef struct {

~~~ step: stk-bottom
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -65,7 +65,8 @@ void tgc_sweep(tgc_t *gc) {
 
 /*** public api ***/
 
-void tgc_start(tgc_t *gc) {
+void tgc_start(tgc_t *gc, void *stk) {
+  gc->bottom = stk;
   gc->nitems = 0;
   gc->nslots = 0;
   gc->items = NULL;
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -10,11 +10,12 @@ typedef struct {
 } tgc_ptr_t;
 
 typedef struct {
+  void *bottom;
   tgc_ptr_t *items;
   size_t nitems, nslots;
 } tgc_t;
 
-void tgc_start(tgc_t *gc);
+void tgc_start(tgc_t *gc, void *stk);
 void tgc_stop(tgc_t *gc);
 void tgc_run(tgc_t *gc);
 

~~~ step: mark-stack
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -52,6 +52,15 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   }
 }
 
+static void tgc_mark_stack(tgc_t *gc) {
+  void *stk, *bot, *top, *p;
+  bot = gc->bottom; top = &stk;
+
+  for (p = top; p <= bot; p = ((char*)p) + sizeof(void*)) {
+    tgc_mark_ptr(gc, *((void**)p));
+  }
+}
+
 void tgc_sweep(tgc_t *gc) {
   size_t i;
 

~~~ step: stack-direction
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -56,8 +56,18 @@ static void tgc_mark_stack(tgc_t *gc) {
   void *stk, *bot, *top, *p;
   bot = gc->bottom; top = &stk;
 
-  for (p = top; p <= bot; p = ((char*)p) + sizeof(void*)) {
-    tgc_mark_ptr(gc, *((void**)p));
+  if (bot == top) { return; }
+
+  if (bot < top) {
+    for (p = top; p >= bot; p = ((char*)p) + sizeof(void*)) {
+      tgc_mark_ptr(gc, *((void**)p));
+    }
+  }
+
+  if (bot > top) {
+    for (p = top; p <= bot; p = ((char*)p) + sizeof(void*)) {
+      tgc_mark_ptr(gc, *((void**)p));
+    }
   }
 }
 

~~~ step: mark
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -71,6 +71,12 @@ static void tgc_mark_stack(tgc_t *gc) {
   }
 }
 
+static void tgc_mark(tgc_t *gc) {
+  if (gc->nitems == 0) { return; }
+
+  tgc_mark_stack(gc);
+}
+
 void tgc_sweep(tgc_t *gc) {
   size_t i;
 

~~~ step: mark-and-sweep
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -103,6 +103,7 @@ void tgc_stop(tgc_t *gc) {
 }
 
 void tgc_run(tgc_t *gc) {
+  tgc_mark(gc);
   tgc_sweep(gc);
 }
 

~~~ step: sweep-unmarked
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -82,6 +82,7 @@ void tgc_sweep(tgc_t *gc) {
 
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) { continue; }
+    if (gc->items[i].mark) { continue; }
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
     gc->nitems--;

~~~ step: reset-marked
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -87,6 +87,11 @@ void tgc_sweep(tgc_t *gc) {
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
     gc->nitems--;
   }
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].ptr == NULL) { continue; }
+    gc->items[i].mark = 0;
+  }
 }
 
 /*** public api ***/

~~~ step: collect-on-alloc
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -118,6 +118,7 @@ static void *tgc_add(tgc_t *gc, void *ptr) {
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr);
+    tgc_run(gc);
     return ptr;
   } else {
     gc->nitems--;

~~~ step: ptr-size
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -2,12 +2,13 @@
 
 /*** pointer table ***/
 
-static void tgc_add_ptr(tgc_t *gc, void *ptr) {
+static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
   size_t i;
 
   item.ptr = ptr;
   item.mark = 0;
+  item.size = size;
 
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) {
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -7,6 +7,7 @@
 typedef struct {
   void *ptr;
   int mark;
+  size_t size;
 } tgc_ptr_t;
 
 typedef struct {

~~~ step: pass-size-to-add-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -114,11 +114,11 @@ void tgc_run(tgc_t *gc) {
   tgc_sweep(gc);
 }
 
-static void *tgc_add(tgc_t *gc, void *ptr) {
+static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
   gc->nitems++;
 
   if (tgc_resize(gc)) {
-    tgc_add_ptr(gc, ptr);
+    tgc_add_ptr(gc, ptr, size);
     tgc_run(gc);
     return ptr;
   } else {

~~~ step: pass-size-to-add
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -131,7 +131,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
 void *tgc_alloc(tgc_t *gc, size_t size) {
   void *ptr = malloc(size);
   if (ptr != NULL) {
-    ptr = tgc_add(gc, ptr);
+    ptr = tgc_add(gc, ptr, size);
   }
   return ptr;
 }

~~~ step: mark-recursively
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -43,11 +43,14 @@ static int tgc_resize(tgc_t *gc) {
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i;
+  size_t i, k;
 
   for (i = 0; i < gc->nslots; i++) {
     if (ptr == gc->items[i].ptr) {
       gc->items[i].mark = 1;
+      for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
+        tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);
+      }
       return;
     }
   }

~~~ step: avoid-infinite-recursion
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -47,6 +47,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
 
   for (i = 0; i < gc->nslots; i++) {
     if (ptr == gc->items[i].ptr) {
+      if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;
       for (k = 0; k < gc->items[i].size/sizeof(void*); k++) {
         tgc_mark_ptr(gc, ((void**)gc->items[i].ptr)[k]);
@@ -76,8 +77,12 @@ static void tgc_mark_stack(tgc_t *gc) {
 }
 
 static void tgc_mark(tgc_t *gc) {
+  jmp_buf env;
+
   if (gc->nitems == 0) { return; }
 
+  memset(&env, 0, sizeof(jmp_buf));
+  setjmp(env);
   tgc_mark_stack(gc);
 }
 

~~~ step: include-setjmp
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -3,6 +3,7 @@
 
 #include <stdlib.h>
 #include <string.h>
+#include <setjmp.h>
 
 typedef struct {
   void *ptr;

~~~ step: volatile-mark-stack
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -78,12 +78,13 @@ static void tgc_mark_stack(tgc_t *gc) {
 
 static void tgc_mark(tgc_t *gc) {
   jmp_buf env;
+  void (*volatile mark_stack)(tgc_t*) = tgc_mark_stack;
 
   if (gc->nitems == 0) { return; }
 
   memset(&env, 0, sizeof(jmp_buf));
   setjmp(env);
-  tgc_mark_stack(gc);
+  mark_stack(gc);
 }
 
 void tgc_sweep(tgc_t *gc) {

~~~ step: mitems
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,7 +14,7 @@ typedef struct {
 typedef struct {
   void *bottom;
   tgc_ptr_t *items;
-  size_t nitems, nslots;
+  size_t nitems, nslots, mitems;
 } tgc_t;
 
 void tgc_start(tgc_t *gc, void *stk);

~~~ step: init-mitems
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -110,6 +110,7 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->bottom = stk;
   gc->nitems = 0;
   gc->nslots = 0;
+  gc->mitems = 0;
   gc->items = NULL;
 }
 

~~~ step: set-mitems
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -102,6 +102,8 @@ void tgc_sweep(tgc_t *gc) {
     if (gc->items[i].ptr == NULL) { continue; }
     gc->items[i].mark = 0;
   }
+
+  gc->mitems = gc->nitems + gc->nitems / 2 + 1;
 }
 
 /*** public api ***/

~~~ step: use-mitems
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -131,7 +131,9 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr, size);
-    tgc_run(gc);
+    if (gc->nitems > gc->mitems) {
+      tgc_run(gc);
+    }
     return ptr;
   } else {
     gc->nitems--;

~~~ step: sweepfactor
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -14,6 +14,7 @@ typedef struct {
 typedef struct {
   void *bottom;
   tgc_ptr_t *items;
+  double sweepfactor;
   size_t nitems, nslots, mitems;
 } tgc_t;
 

~~~ step: set-sweepfactor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -114,6 +114,7 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->nslots = 0;
   gc->mitems = 0;
   gc->items = NULL;
+  gc->sweepfactor = 0.5;
 }
 
 void tgc_stop(tgc_t *gc) {

~~~ step: use-sweepfactor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -103,7 +103,7 @@ void tgc_sweep(tgc_t *gc) {
     gc->items[i].mark = 0;
   }
 
-  gc->mitems = gc->nitems + gc->nitems / 2 + 1;
+  gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
 }
 
 /*** public api ***/

~~~ step: paused
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -13,6 +13,7 @@ typedef struct {
 
 typedef struct {
   void *bottom;
+  int paused;
   tgc_ptr_t *items;
   double sweepfactor;
   size_t nitems, nslots, mitems;
@@ -20,6 +21,8 @@ typedef struct {
 
 void tgc_start(tgc_t *gc, void *stk);
 void tgc_stop(tgc_t *gc);
+void tgc_pause(tgc_t *gc);
+void tgc_resume(tgc_t *gc);
 void tgc_run(tgc_t *gc);
 
 void *tgc_alloc(tgc_t *gc, size_t size);

~~~ step: init-paused
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -110,6 +110,7 @@ void tgc_sweep(tgc_t *gc) {
 
 void tgc_start(tgc_t *gc, void *stk) {
   gc->bottom = stk;
+  gc->paused = 0;
   gc->nitems = 0;
   gc->nslots = 0;
   gc->mitems = 0;

~~~ step: pause-resume
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -123,6 +123,14 @@ void tgc_stop(tgc_t *gc) {
   free(gc->items);
 }
 
+void tgc_pause(tgc_t *gc) {
+  gc->paused = 1;
+}
+
+void tgc_resume(tgc_t *gc) {
+  gc->paused = 0;
+}
+
 void tgc_run(tgc_t *gc) {
   tgc_mark(gc);
   tgc_sweep(gc);

~~~ step: use-paused
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -141,7 +141,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr, size);
-    if (gc->nitems > gc->mitems) {
+    if (!gc->paused && gc->nitems > gc->mitems) {
       tgc_run(gc);
     }
     return ptr;

~~~ step: minptr-maxptr
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -2,6 +2,7 @@
 #define TGC_H
 
 #include <stdlib.h>
+#include <stdint.h>
 #include <string.h>
 #include <setjmp.h>
 
@@ -14,6 +15,7 @@ typedef struct {
 typedef struct {
   void *bottom;
   int paused;
+  uintptr_t minptr, maxptr;
   tgc_ptr_t *items;
   double sweepfactor;
   size_t nitems, nslots, mitems;

~~~ step: init-minptr-maxptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -115,6 +115,8 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->nslots = 0;
   gc->mitems = 0;
   gc->items = NULL;
+  gc->minptr = UINTPTR_MAX;
+  gc->maxptr = 0;
   gc->sweepfactor = 0.5;
 }
 

~~~ step: set-minptr-maxptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -140,6 +140,10 @@ void tgc_run(tgc_t *gc) {
 
 static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
   gc->nitems++;
+  gc->maxptr = ((uintptr_t)ptr) + size > gc->maxptr ?
+    ((uintptr_t)ptr) + size : gc->maxptr;
+  gc->minptr = ((uintptr_t)ptr)        < gc->minptr ?
+    ((uintptr_t)ptr)        : gc->minptr;
 
   if (tgc_resize(gc)) {
     tgc_add_ptr(gc, ptr, size);

~~~ step: use-minptr-maxptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -45,6 +45,9 @@ static int tgc_resize(tgc_t *gc) {
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   size_t i, k;
 
+  if ((uintptr_t)ptr < gc->minptr
+  ||  (uintptr_t)ptr > gc->maxptr) { return; }
+
   for (i = 0; i < gc->nslots; i++) {
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }

~~~ step: hash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -2,6 +2,10 @@
 
 /*** pointer table ***/
 
+static size_t tgc_hash(void *ptr) {
+  return ((uintptr_t)ptr) >> 3;
+}
+
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
   size_t i;

~~~ step: use-hash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -10,15 +10,18 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
   size_t i;
 
+  i = tgc_hash(ptr) % gc->nslots;
+
   item.ptr = ptr;
   item.mark = 0;
   item.size = size;
 
-  for (i = 0; i < gc->nslots; i++) {
+  while (1) {
     if (gc->items[i].ptr == NULL) {
       gc->items[i] = item;
       return;
     }
+    i = (i+1) % gc->nslots;
   }
 }
 

~~~ step: use-hash-in-mark-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -50,12 +50,15 @@ static int tgc_resize(tgc_t *gc) {
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i, k;
+  size_t i, j, k;
 
   if ((uintptr_t)ptr < gc->minptr
   ||  (uintptr_t)ptr > gc->maxptr) { return; }
 
-  for (i = 0; i < gc->nslots; i++) {
+  i = tgc_hash(ptr) % gc->nslots; j = 0;
+
+  while (1) {
+    if (j == gc->nslots) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;
@@ -64,6 +67,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
       }
       return;
     }
+    i = (i+1) % gc->nslots; j++;
   }
 }
 

~~~ step: fix-resize
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -26,6 +26,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
 }
 
 static int tgc_resize(tgc_t *gc) {
+  size_t i;
   tgc_ptr_t *old_items = gc->items;
   size_t old_size = gc->nslots;
 
@@ -40,7 +41,11 @@ static int tgc_resize(tgc_t *gc) {
     return 0;
   }
 
-  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
+  for (i = 0; i < old_size; i++) {
+    if (old_items[i].ptr != NULL) {
+      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size);
+    }
+  }
 
   free(old_items);
 

~~~ step: add-primes
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -25,6 +25,19 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   }
 }
 
+enum {
+  TGC_PRIMES_COUNT = 24
+};
+
+static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
+  0,       1,       5,       11,
+  23,      53,      101,     197,
+  389,     683,     1259,    2417,
+  4733,    9371,    18617,   37097,
+  74093,   148073,  296099,  592019,
+  1100009, 2200013, 4400021, 8800019
+};
+
 static int tgc_resize(tgc_t *gc) {
   size_t i;
   tgc_ptr_t *old_items = gc->items;

~~~ step: ideal-size
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -38,6 +38,14 @@ static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
   1100009, 2200013, 4400021, 8800019
 };
 
+static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
+  size_t i;
+  for (i = 0; i < TGC_PRIMES_COUNT; i++) {
+    if (tgc_primes[i] >= size) { return tgc_primes[i]; }
+  }
+  return 0;
+}
+
 static int tgc_resize(tgc_t *gc) {
   size_t i;
   tgc_ptr_t *old_items = gc->items;

~~~ step: fix-large-sizes
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -39,10 +39,14 @@ static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
 };
 
 static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
-  size_t i;
+  size_t i, last;
   for (i = 0; i < TGC_PRIMES_COUNT; i++) {
     if (tgc_primes[i] >= size) { return tgc_primes[i]; }
   }
+  last = tgc_primes[TGC_PRIMES_COUNT-1];
+  for (i = 0;; i++) {
+    if (last * i >= size) { return last * i; }
+  }
   return 0;
 }
 

~~~ step: resize-more
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -77,6 +77,12 @@ static int tgc_resize(tgc_t *gc) {
   return 1;
 }
 
+static int tgc_resize_more(tgc_t *gc) {
+  size_t new_size = tgc_ideal_size(gc, gc->nitems);
+  size_t old_size = gc->nslots;
+  return (new_size > old_size) ? tgc_rehash(gc, new_size) : 1;
+}
+
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {

~~~ step: rehash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -50,14 +50,12 @@ static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
   return 0;
 }
 
-static int tgc_resize(tgc_t *gc) {
+static int tgc_rehash(tgc_t *gc, size_t new_size) {
   size_t i;
   tgc_ptr_t *old_items = gc->items;
   size_t old_size = gc->nslots;
 
-  if (gc->nslots >= gc->nitems) return 1;
-
-  gc->nslots = gc->nitems * 2;
+  gc->nslots = new_size;
   gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
 
   if (gc->items == NULL) {

~~~ step: use-resize-more
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -193,7 +193,7 @@ static void *tgc_add(tgc_t *gc, void *ptr, size_t size) {
   gc->minptr = ((uintptr_t)ptr)        < gc->minptr ?
     ((uintptr_t)ptr)        : gc->minptr;
 
-  if (tgc_resize(gc)) {
+  if (tgc_resize_more(gc)) {
     tgc_add_ptr(gc, ptr, size);
     if (!gc->paused && gc->nitems > gc->mitems) {
       tgc_run(gc);

~~~ step: add-loadfactor
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -17,7 +17,7 @@ typedef struct {
   int paused;
   uintptr_t minptr, maxptr;
   tgc_ptr_t *items;
-  double sweepfactor;
+  double loadfactor, sweepfactor;
   size_t nitems, nslots, mitems;
 } tgc_t;
 

~~~ step: init-loadfactor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -165,6 +165,7 @@ void tgc_start(tgc_t *gc, void *stk) {
   gc->items = NULL;
   gc->minptr = UINTPTR_MAX;
   gc->maxptr = 0;
+  gc->loadfactor = 0.9;
   gc->sweepfactor = 0.5;
 }
 

~~~ step: use-loadfactor
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -40,6 +40,7 @@ static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
 
 static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
   size_t i, last;
+  size = (size_t)((double)(size+1) / gc->loadfactor);
   for (i = 0; i < TGC_PRIMES_COUNT; i++) {
     if (tgc_primes[i] >= size) { return tgc_primes[i]; }
   }

~~~ step: resize-less
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -82,6 +82,12 @@ static int tgc_resize_more(tgc_t *gc) {
   return (new_size > old_size) ? tgc_rehash(gc, new_size) : 1;
 }
 
+static int tgc_resize_less(tgc_t *gc) {
+  size_t new_size = tgc_ideal_size(gc, gc->nitems);
+  size_t old_size = gc->nslots;
+  return (new_size < old_size) ? tgc_rehash(gc, new_size) : 1;
+}
+
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {

~~~ step: call-resize-less
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -158,6 +158,8 @@ void tgc_sweep(tgc_t *gc) {
     gc->items[i].mark = 0;
   }
 
+  tgc_resize_less(gc);
+
   gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
 }
 

~~~ step: move-items-back
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -143,13 +143,27 @@ static void tgc_mark(tgc_t *gc) {
 }
 
 void tgc_sweep(tgc_t *gc) {
-  size_t i;
+  size_t i, j, nj, nh;
 
   for (i = 0; i < gc->nslots; i++) {
     if (gc->items[i].ptr == NULL) { continue; }
     if (gc->items[i].mark) { continue; }
+
     free(gc->items[i].ptr);
     memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+
+    j = i;
+    while (1) {
+      nj = (j+1) % gc->nslots;
+      nh = tgc_hash(gc->items[nj].ptr);
+      if (gc->items[nj].ptr != NULL && nh != i) {
+        memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
+        memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
+        j = nj;
+      } else {
+        break;
+      }
+    }
     gc->nitems--;
   }
 

~~~ step: stop-search-on-empty
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -99,7 +99,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   i = tgc_hash(ptr) % gc->nslots; j = 0;
 
   while (1) {
-    if (j == gc->nslots) { return; }
+    if (gc->items[i].ptr == NULL || j == gc->nslots) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;

~~~ step: add-hash
diff --git a/tgc.h b/tgc.h
--- a/tgc.h
+++ b/tgc.h
@@ -9,7 +9,7 @@
 typedef struct {
   void *ptr;
   int mark;
-  size_t size;
+  size_t size, hash;
 } tgc_ptr_t;
 
 typedef struct {

~~~ step: set-hash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -15,6 +15,7 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   item.ptr = ptr;
   item.mark = 0;
   item.size = size;
+  item.hash = i+1;
 
   while (1) {
     if (gc->items[i].ptr == NULL) {

~~~ step: use-zero-hash-in-add-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -8,7 +8,7 @@ static size_t tgc_hash(void *ptr) {
 
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
-  size_t i;
+  size_t h, i;
 
   i = tgc_hash(ptr) % gc->nslots;
 
@@ -18,10 +18,8 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   item.hash = i+1;
 
   while (1) {
-    if (gc->items[i].ptr == NULL) {
-      gc->items[i] = item;
-      return;
-    }
+    h = gc->items[i].hash;
+    if (h == 0) { gc->items[i] = item; return; }
     i = (i+1) % gc->nslots;
   }
 }

~~~ step: use-zero-hash-in-rehash
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -65,7 +65,7 @@ static int tgc_rehash(tgc_t *gc, size_t new_size) {
   }
 
   for (i = 0; i < old_size; i++) {
-    if (old_items[i].ptr != NULL) {
+    if (old_items[i].hash != 0) {
       tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size);
     }
   }

~~~ step: use-zero-hash-in-mark-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -90,7 +90,7 @@ static int tgc_resize_less(tgc_t *gc) {
 /*** mark and sweep ***/
 
 static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i, j, k;
+  size_t i, j, h, k;
 
   if ((uintptr_t)ptr < gc->minptr
   ||  (uintptr_t)ptr > gc->maxptr) { return; }
@@ -98,7 +98,8 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
   i = tgc_hash(ptr) % gc->nslots; j = 0;
 
   while (1) {
-    if (gc->items[i].ptr == NULL || j == gc->nslots) { return; }
+    h = gc->items[i].hash;
+    if (h == 0 || j == gc->nslots) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;

~~~ step: use-zero-hash-in-sweep
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -155,8 +155,8 @@ void tgc_sweep(tgc_t *gc) {
     j = i;
     while (1) {
       nj = (j+1) % gc->nslots;
-      nh = tgc_hash(gc->items[nj].ptr);
-      if (gc->items[nj].ptr != NULL && nh != i) {
+      nh = gc->items[nj].hash;
+      if (nh != 0 && nh-1 != i) {
         memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
         memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
         j = nj;

~~~ step: probe
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -6,6 +6,12 @@ static size_t tgc_hash(void *ptr) {
   return ((uintptr_t)ptr) >> 3;
 }
 
+static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
+  long v = i - (h-1);
+  if (v < 0) { v = gc->nslots + v; }
+  return v;
+}
+
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   tgc_ptr_t item;
   size_t h, i;

~~~ step: robin-hood-add-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -13,10 +13,10 @@ static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
 }
 
 static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
-  tgc_ptr_t item;
-  size_t h, i;
+  tgc_ptr_t item, tmp;
+  size_t h, p, i, j;
 
-  i = tgc_hash(ptr) % gc->nslots;
+  i = tgc_hash(ptr) % gc->nslots; j = 0;
 
   item.ptr = ptr;
   item.mark = 0;
@@ -26,7 +26,15 @@ static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
   while (1) {
     h = gc->items[i].hash;
     if (h == 0) { gc->items[i] = item; return; }
-    i = (i+1) % gc->nslots;
+    if (gc->items[i].ptr == item.ptr) { return; }
+    p = tgc_probe(gc, i, h);
+    if (j >= p) {
+      tmp = gc->items[i];
+      gc->items[i] = item;
+      item = tmp;
+      j = p;
+    }
+    i = (i+1) % gc->nslots; j++;
   }
 }
 

~~~ step: robin-hood-mark-ptr
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -113,7 +113,7 @@ static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
 
   while (1) {
     h = gc->items[i].hash;
-    if (h == 0 || j == gc->nslots) { return; }
+    if (h == 0 || j > tgc_probe(gc, i, h)) { return; }
     if (ptr == gc->items[i].ptr) {
       if (gc->items[i].mark) { return; }
       gc->items[i].mark = 1;

~~~ step: use-zero-hash-in-sweep-ooo
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -160,7 +160,7 @@ void tgc_sweep(tgc_t *gc) {
   size_t i, j, nj, nh;
 
   for (i = 0; i < gc->nslots; i++) {
-    if (gc->items[i].ptr == NULL) { continue; }
+    if (gc->items[i].hash == 0) { continue; }
     if (gc->items[i].mark) { continue; }
 
     free(gc->items[i].ptr);

~~~ step: use-probe-in-sweep
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -170,7 +170,7 @@ void tgc_sweep(tgc_t *gc) {
     while (1) {
       nj = (j+1) % gc->nslots;
       nh = gc->items[nj].hash;
-      if (nh != 0 && nh-1 != i) {
+      if (nh != 0 && tgc_probe(gc, nj, nh) > 0) {
         memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
         memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
         j = nj;

~~~ step: use-zero-hash-in-sweep-again
diff --git a/tgc.c b/tgc.c
--- a/tgc.c
+++ b/tgc.c
@@ -182,7 +182,7 @@ void tgc_sweep(tgc_t *gc) {
   }
 
   for (i = 0; i < gc->nslots; i++) {
-    if (gc->items[i].ptr == NULL) { continue; }
+    if (gc->items[i].hash == 0) { continue; }
     gc->items[i].mark = 0;
   }
 

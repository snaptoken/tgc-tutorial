# Destructors

~~~ 203. add-dtor
--- tgc.h
+++ tgc.h
@@ -17,6 +17,7 @@
|  void *ptr;
|  int flags;
|  size_t size, hash;
+  void (*dtor)(void*);
|} tgc_ptr_t;
|
|typedef struct {

~~~ 204. dtor-opt-prototypes
--- tgc.h
+++ tgc.h
@@ -40,8 +40,9 @@
|void *tgc_realloc(tgc_t *gc, void *ptr, size_t size);
|void tgc_free(tgc_t *gc, void *ptr);
|
-void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags);
-void *tgc_calloc_opt(tgc_t *gc, size_t num, size_t size, int flags);
+void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void (*dtor)(void*));
+void *tgc_calloc_opt(tgc_t *gc, size_t num, size_t size, int flags,
+                     void (*dtor)(void*));
|
|int tgc_get_flags(tgc_t *gc, void *ptr);
|void tgc_set_flags(tgc_t *gc, void *ptr, int flags);

~~~ 205. opt-dtor
--- tgc.c
+++ tgc.c
@@ -340,27 +340,30 @@
|}
|
|void *tgc_alloc(tgc_t *gc, size_t size) {
-  return tgc_alloc_opt(gc, size, 0);
+  return tgc_alloc_opt(gc, size, 0, NULL);
|}
|
-void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags) {
+void *tgc_alloc_opt(tgc_t *gc, size_t size, int flags, void (*dtor)(void*)) {
|  void *ptr = malloc(size);
|  if (ptr != NULL) {
|    printf("[DEBUG] allocated %zu bytes at %p\n", size, ptr);
-    ptr = tgc_add(gc, ptr, size, flags);
+    ptr = tgc_add(gc, ptr, size, flags, dtor);
|  }
|  return ptr;
|}
|
|void *tgc_calloc(tgc_t *gc, size_t num, size_t size) {
-  return tgc_calloc_opt(gc, num, size, 0);
+  return tgc_calloc_opt(gc, num, size, 0, NULL);
|}
|
-void *tgc_calloc_opt(tgc_t *gc, size_t num, size_t size, int flags) {
+void *tgc_calloc_opt(
+  tgc_t *gc, size_t num, size_t size,
+  int flags, void (*dtor)(void*)
+) {
|  void *ptr = calloc(num, size);
|  if (ptr != NULL) {
|    printf("[DEBUG] callocated %zu bytes at %p\n", num * size, ptr);
-    ptr = tgc_add(gc, ptr, num * size, flags);
+    ptr = tgc_add(gc, ptr, num * size, flags, dtor);
|  }
|  return ptr;
|}

~~~ 206. realloc-dtor
--- tgc.c
+++ tgc.c
@@ -380,7 +380,7 @@
|  printf("[DEBUG] reallocated %zu bytes at %p\n", size, qtr);
|
|  if (ptr == NULL) {
-    tgc_add(gc, qtr, size, 0);
+    tgc_add(gc, qtr, size, 0, NULL);
|    return qtr;
|  }
|
@@ -393,8 +393,9 @@
|
|  if (p && qtr != ptr) {
|    int flags = p->flags;
+    void (*dtor)(void*) = p->dtor;
|    tgc_rem(gc, ptr);
-    tgc_add(gc, qtr, size, flags);
+    tgc_add(gc, qtr, size, flags, dtor);
|    return qtr;
|  }
|

~~~ 207. add-pass-dtor
--- tgc.c
+++ tgc.c
@@ -313,7 +313,10 @@
|
|/*** allocator functions ***/
|
-static void *tgc_add(tgc_t *gc, void *ptr, size_t size, int flags) {
+static void *tgc_add(
+  tgc_t *gc, void *ptr, size_t size,
+  int flags, void (*dtor)(void*)
+) {
|  gc->nitems++;
|  gc->maxptr = ((uintptr_t)ptr) + size > gc->maxptr ?
|    ((uintptr_t)ptr) + size : gc->maxptr;
@@ -321,7 +324,7 @@
|    ((uintptr_t)ptr)        : gc->minptr;
|
|  if (tgc_resize_more(gc)) {
-    tgc_add_ptr(gc, ptr, size, flags);
+    tgc_add_ptr(gc, ptr, size, flags, dtor);
|    if (!gc->paused && gc->nitems > gc->mitems) {
|      tgc_run(gc);
|    }

~~~ 208. set-dtor
--- tgc.c
+++ tgc.c
@@ -27,7 +27,10 @@
|  }
|}
|
-static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size, int flags) {
+static void tgc_add_ptr(
+  tgc_t *gc, void *ptr, size_t size,
+  int flags, void (*dtor)(void*)
+) {
|  tgc_ptr_t item, tmp;
|  size_t i, j, h, p;
|
@@ -38,6 +41,7 @@
|  item.flags = flags;
|  item.size = size;
|  item.hash = i+1;
+  item.dtor = dtor;
|
|  while (1) {
|    h = gc->items[i].hash;

~~~ 209. rehash-dtor
--- tgc.c
+++ tgc.c
@@ -136,7 +136,9 @@
|
|  for (i = 0; i < old_size; i++) {
|    if (old_items[i].hash != 0) {
-      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size, old_items[i].flags);
+      tgc_add_ptr(gc,
+        old_items[i].ptr, old_items[i].size,
+        old_items[i].flags, old_items[i].dtor);
|    }
|  }
|

~~~ 210. debug-dtor
--- tgc.c
+++ tgc.c
@@ -456,6 +456,7 @@
|
|  printf("  size = %zu\n", ptr->size);
|  printf("  hash = %zu\n", ptr->hash);
+  printf("  dtor = %p\n", ptr->dtor);
|}
|
|void tgc_debug(tgc_t *gc, void (*pretty_print)(tgc_ptr_t*)) {

~~~ 211. pass-dtor-to-alloc-opt
--- todo.c
+++ todo.c
@@ -32,7 +32,7 @@
|  size_t len = strlen(description);
|
|  todo_item->next = *todo;
-  todo_item->description = (char*)tgc_alloc_opt(&gc, len + 1, TGC_LEAF);
+  todo_item->description = (char*)tgc_alloc_opt(&gc, len + 1, TGC_LEAF, NULL);
|  strcpy(todo_item->description, description);
|
|  *todo = todo_item;
@@ -94,7 +94,7 @@
|  char input[1024];
|  int quitting = 0;
|
-  todo = tgc_alloc_opt(&gc, sizeof(TodoItem**), TGC_ROOT);
+  todo = tgc_alloc_opt(&gc, sizeof(TodoItem**), TGC_ROOT, NULL);
|  *todo = NULL;
|
|  while (!quitting) {

~~~ 212. string-dtor
--- todo.c
+++ todo.c
@@ -13,6 +13,10 @@
|
|static TodoItem** todo;
|
+void string_dtor(void *ptr) {
+  printf("Destructing string: \"%s\"\n", ptr);
+}
+
|void todo_print() {
|  if (*todo == NULL) {
|    printf("No todos! :D\n");
@@ -32,7 +36,7 @@
|  size_t len = strlen(description);
|
|  todo_item->next = *todo;
-  todo_item->description = (char*)tgc_alloc_opt(&gc, len + 1, TGC_LEAF, NULL);
+  todo_item->description = (char*)tgc_alloc_opt(&gc, len + 1, TGC_LEAF, string_dtor);
|  strcpy(todo_item->description, description);
|
|  *todo = todo_item;

~~~ 213. get-set-dtor-prototypes
--- tgc.h
+++ tgc.h
@@ -46,6 +46,8 @@
|
|int tgc_get_flags(tgc_t *gc, void *ptr);
|void tgc_set_flags(tgc_t *gc, void *ptr, int flags);
+void (*tgc_get_dtor(tgc_t *gc, void *ptr))(void*);
+void tgc_set_dtor(tgc_t *gc, void *ptr, void (*dtor)(void*));
|size_t tgc_get_size(tgc_t *gc, void *ptr);
|
|void tgc_debug(tgc_t *gc, void (*pretty_print)(tgc_ptr_t*));

~~~ 214. get-set-dtor
--- tgc.c
+++ tgc.c
@@ -432,6 +432,17 @@
|  if (p) { p->flags = flags; }
|}
|
+void (*tgc_get_dtor(tgc_t *gc, void *ptr))(void*) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) { return p->dtor; }
+  return NULL;
+}
+
+void tgc_set_dtor(tgc_t *gc, void *ptr, void (*dtor)(void*)) {
+  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
+  if (p) { p->dtor = dtor; }
+}
+
|size_t tgc_get_size(tgc_t *gc, void *ptr) {
|  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
|  if (p) { return p->size; }

~~~ 215. call-dtor
--- tgc.c
+++ tgc.c
@@ -252,6 +252,7 @@
|    if (gc->items[i].flags & TGC_MARK) { i++; continue; }
|    if (gc->items[i].flags & TGC_ROOT) { i++; continue; }
|    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);
+    if (gc->items[i].dtor) gc->items[i].dtor(gc->items[i].ptr);
|    free(gc->items[i].ptr);
|    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
|

~~~ 216. alloc-in-dtor
--- todo.c
+++ todo.c
@@ -14,6 +14,7 @@
|static TodoItem** todo;
|
|void string_dtor(void *ptr) {
+  tgc_alloc(&gc, 16);
|  printf("Destructing string: \"%s\"\n", ptr);
|}
|

~~~ 217. revert-call-dtor
--- tgc.c
+++ tgc.c
@@ -252,7 +252,6 @@
|    if (gc->items[i].flags & TGC_MARK) { i++; continue; }
|    if (gc->items[i].flags & TGC_ROOT) { i++; continue; }
|    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);
-    if (gc->items[i].dtor) gc->items[i].dtor(gc->items[i].ptr);
|    free(gc->items[i].ptr);
|    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
|

~~~ 218. add-frees
--- tgc.h
+++ tgc.h
@@ -24,9 +24,9 @@
|  void *bottom;
|  int paused;
|  uintptr_t minptr, maxptr;
-  tgc_ptr_t *items;
+  tgc_ptr_t *items, *frees;
|  double loadfactor, sweepfactor;
-  size_t nitems, nslots, mitems;
+  size_t nitems, nslots, mitems, nfrees;
|} tgc_t;
|
|void tgc_start(tgc_t *gc, void *stk);

~~~ 219. init-frees
--- tgc.c
+++ tgc.c
@@ -287,7 +287,9 @@
|  gc->nitems = 0;
|  gc->nslots = 0;
|  gc->mitems = 0;
+  gc->nfrees = 0;
|  gc->items = NULL;
+  gc->frees = NULL;
|  gc->minptr = UINTPTR_MAX;
|  gc->maxptr = 0;
|  gc->loadfactor = 0.9;
@@ -300,6 +302,7 @@
|  printf("[DEBUG] running sweep phase without marking anything\n");
|  tgc_sweep(gc);
|  free(gc->items);
+  free(gc->frees);
|
|  printf("[DEBUG] tgc stop\n");
|}

~~~ 220. debug-frees
--- tgc.c
+++ tgc.c
@@ -483,9 +483,15 @@
|  printf("nitems = %zu\n", gc->nitems);
|  printf("nslots = %zu\n", gc->nslots);
|  printf("mitems = %zu\n", gc->mitems);
+  printf("nfrees = %zu\n", gc->nfrees);
|  for (size_t i = 0; i < gc->nslots; i++) {
|    printf("items[%zu] = {\n", i);
|    tgc_debug_ptr(&gc->items[i], pretty_print);
|    printf("}\n");
|  }
+  for (size_t i = 0; i < gc->nfrees; i++) {
+    printf("frees[%zu] = {\n", i);
+    tgc_debug_ptr(&gc->frees[i], pretty_print);
+    printf("}\n");
+  }
|}

~~~ 221. sweep-count-frees
--- tgc.c
+++ tgc.c
@@ -246,6 +246,14 @@
|
|  if (gc->nitems == 0) { return; }
|
+  gc->nfrees = 0;
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].hash ==        0) { continue; }
+    if (gc->items[i].flags & TGC_MARK) { continue; }
+    if (gc->items[i].flags & TGC_ROOT) { continue; }
+    gc->nfrees++;
+  }
+
|  i = 0;
|  while (i < gc->nslots) {
|    if (gc->items[i].hash ==        0) { i++; continue; }

~~~ 222. sweep-alloc-frees
--- tgc.c
+++ tgc.c
@@ -254,6 +254,9 @@
|    gc->nfrees++;
|  }
|
+  gc->frees = realloc(gc->frees, sizeof(tgc_ptr_t) * gc->nfrees);
+  if (gc->frees == NULL) { return; }
+
|  i = 0;
|  while (i < gc->nslots) {
|    if (gc->items[i].hash ==        0) { i++; continue; }

~~~ 223. sweep-add-to-frees
--- tgc.c
+++ tgc.c
@@ -240,7 +240,7 @@
|}
|
|static void tgc_sweep(tgc_t *gc) {
-  size_t i, j, nj, nh;
+  size_t i, j, k, nj, nh;
|
|  printf("[DEBUG] starting sweep phase\n");
|
@@ -257,13 +257,14 @@
|  gc->frees = realloc(gc->frees, sizeof(tgc_ptr_t) * gc->nfrees);
|  if (gc->frees == NULL) { return; }
|
-  i = 0;
+  i = 0; k = 0;
|  while (i < gc->nslots) {
|    if (gc->items[i].hash ==        0) { i++; continue; }
|    if (gc->items[i].flags & TGC_MARK) { i++; continue; }
|    if (gc->items[i].flags & TGC_ROOT) { i++; continue; }
-    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);
-    free(gc->items[i].ptr);
+
+    printf("[DEBUG] adding %p to frees list\n", gc->items[i].ptr);
+    gc->frees[k] = gc->items[i]; k++;
|    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
|
|    j = i;

~~~ 224. sweep-free-frees
--- tgc.c
+++ tgc.c
@@ -289,6 +289,12 @@
|  tgc_resize_less(gc);
|
|  gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
+
+  for (i = 0; i < gc->nfrees; i++) {
+    printf("[DEBUG] freeing %p\n", gc->frees[i].ptr);
+    if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
+    free(gc->frees[i].ptr);
+  }
|}
|
|/*** gc control ***/

~~~ 225. sweep-cleanup-frees
--- tgc.c
+++ tgc.c
@@ -295,6 +295,10 @@
|    if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
|    free(gc->frees[i].ptr);
|  }
+
+  free(gc->frees);
+  gc->frees = NULL;
+  gc->nfrees = 0;
|}
|
|/*** gc control ***/

~~~ 226. free-dtor
--- tgc.c
+++ tgc.c
@@ -439,6 +439,9 @@
|void tgc_free(tgc_t *gc, void *ptr) {
|  tgc_ptr_t *p = tgc_get_ptr(gc, ptr);
|  if (p) {
+    if (p->dtor) {
+      p->dtor(ptr);
+    }
|    free(ptr);
|    tgc_rem(gc, ptr);
|  }

~~~ 227. rem-ptr-frees-null
--- tgc.c
+++ tgc.c
@@ -64,6 +64,10 @@
|
|  if (gc->nitems == 0) { return; }
|
+  for (i = 0; i < gc->nfrees; i++) {
+    if (gc->frees[i].ptr == ptr) { gc->frees[i].ptr = NULL; }
+  }
+
|  i = tgc_hash(ptr) % gc->nslots;
|  j = 0;
|

~~~ 228. sweep-check-frees-for-null
--- tgc.c
+++ tgc.c
@@ -295,9 +295,11 @@
|  gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
|
|  for (i = 0; i < gc->nfrees; i++) {
-    printf("[DEBUG] freeing %p\n", gc->frees[i].ptr);
-    if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
-    free(gc->frees[i].ptr);
+    if (gc->frees[i].ptr) {
+      printf("[DEBUG] freeing %p\n", gc->frees[i].ptr);
+      if (gc->frees[i].dtor) { gc->frees[i].dtor(gc->frees[i].ptr); }
+      free(gc->frees[i].ptr);
+    }
|  }
|
|  free(gc->frees);

~~~ 229. dont-alloc-in-dtor
--- todo.c
+++ todo.c
@@ -14,7 +14,6 @@
|static TodoItem** todo;
|
|void string_dtor(void *ptr) {
-  tgc_alloc(&gc, 16);
|  printf("Destructing string: \"%s\"\n", ptr);
|}
|

~~~ 230. free-todo
--- todo.c
+++ todo.c
@@ -142,6 +142,8 @@
|      quitting = 1;
|    }
|  }
+
+  tgc_free(&gc, todo);
|}
|
|int main(int argc, char **argv) {


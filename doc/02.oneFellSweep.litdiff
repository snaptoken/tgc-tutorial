# One fell sweep

In the last chapter, we created a todo app that manually manages its memory. This required a lot of careful thought and tricky code. In this chapter, our goal is to create a minimal garbage collector that `free()`s memory for us, so that we don't have to.

Our only requirement for now is that when our program *ends*, no memory has leaked. The simplest way to accomplish this is to keep track of each block of memory allocated, and `free()` it all at once at the very end of our program, in "one fell sweep".

In practice, a garbage collector that only collects garbage at the very end of the program's life is useless --- the operating system will reclaim all your program's memory at that point anyways. But starting out this way will lay a lot of groundwork towards making a proper garbage collector in the following chapters.

## No more `free()`

Let's undo all the changes we made in the last section of the last chapter. This will bring the memory leaks back, but by the end of this chapter they'll be taken care of by our garbage collector.

~~~ 26. revert-free
--- todo.c
+++ todo.c
@@ -33,10 +33,7 @@
|
|TodoItem* todo_remove(TodoItem* todo, int index) {
|  if (index == 1 && todo) {
-    TodoItem* next = todo->next;
-    free(todo->description);
-    free(todo);
-    return next;
+    return todo->next;
|  }
|
|  int id = 1;
@@ -44,10 +41,7 @@
|  while (cur) {
|    if (id == index - 1) {
|      if (cur->next) {
-        TodoItem* to_delete = cur->next;
|        cur->next = cur->next->next;
-        free(to_delete->description);
-        free(to_delete);
|      }
|      break;
|    }
@@ -60,12 +54,6 @@
|
|TodoItem* todo_snip(TodoItem* todo, int index) {
|  if (index <= 1) {
-    while (todo) {
-      TodoItem* to_delete = todo;
-      todo = todo->next;
-      free(to_delete->description);
-      free(to_delete);
-    }
|    return NULL;
|  }
|
@@ -73,14 +61,7 @@
|  TodoItem* cur = todo;
|  while (cur) {
|    if (id == index - 1) {
-      TodoItem* to_snip = cur->next;
|      cur->next = NULL;
-      while (to_snip) {
-        TodoItem* to_delete = to_snip;
-        to_snip = to_snip->next;
-        free(to_delete->description);
-        free(to_delete);
-      }
|      break;
|    }
|    cur = cur->next;
@@ -134,14 +115,5 @@
|    }
|  }
|
-  TodoItem* cur = todo;
-  while (cur) {
-    TodoItem* to_delete = cur;
-    cur = cur->next;
-
-    free(to_delete->description);
-    free(to_delete);
-  }
-
|  return 0;
|}

Ahh, much better.

## Creating a library

To free all allocated memory, our garbage collector will need to *know* about every block of memory that was allocated. To keep track of allocations, we'll provide our own allocation function that wraps `malloc()`.

Our garbage collector will be packaged up in a library named `tgc` (**t**iny **g**arbage **c**ollector), so we'll call our allocation function `tgc_alloc()`.

Let's replace both calls to `malloc()` with calls to this new allocator function.

~~~ 27. call-tgc-alloc
--- todo.c
+++ todo.c
@@ -21,11 +21,11 @@
|}
|
|TodoItem* todo_add(TodoItem* todo, const char* description) {
-  TodoItem* todo_item = (TodoItem*)malloc(sizeof(TodoItem));
+  TodoItem* todo_item = (TodoItem*)tgc_alloc(sizeof(TodoItem));
|  size_t len = strlen(description);
|
|  todo_item->next = todo;
-  todo_item->description = (char*)malloc(len + 1);
+  todo_item->description = (char*)tgc_alloc(len + 1);
|  strcpy(todo_item->description, description);
|
|  return todo_item;

As mentioned, our library will be named `tgc`, so we'll include a new header file named `tgc.h` to get `tgc_alloc()`.

~~~ 28. include-tgc-h
--- todo.c
+++ todo.c
@@ -1,6 +1,7 @@
|#include <stdio.h>
|#include <stdlib.h>
|#include <string.h>
+#include "tgc.h"
|
|typedef struct TodoItem {
|  char* description;

Let's create the `tgc.h` file now. This will contain the public API of our library.

~~~ 29. declare-tgc-alloc
--- /dev/null
+++ tgc.h
@@ -0,0 +1,1 @@
+void *tgc_alloc(size_t size);

Include `<stdlib.h>` to get the `size_t` type:

~~~ 30. include-stdlib
--- tgc.h
+++ tgc.h
@@ -1,1 +1,3 @@
+#include <stdlib.h>
+
|void *tgc_alloc(size_t size);

Add an [include guard](https://en.wikipedia.org/wiki/Include_guard) so users of our library can `#include` it more than once in their project without causing errors.

~~~ 31. include-guard
--- tgc.h
+++ tgc.h
@@ -1,3 +1,8 @@
+#ifndef TGC_H
+#define TGC_H
+
|#include <stdlib.h>
|
|void *tgc_alloc(size_t size);
+
+#endif

Now we're ready to write the `tgc_alloc()` function. Put it in a new file called `tgc.c`. For now all it'll do is call `malloc()`.

~~~ 32. define-tgc-alloc
--- /dev/null
+++ tgc.c
@@ -0,0 +1,4 @@
+void *tgc_alloc(size_t size) {
+  void *ptr = malloc(size);
+  return ptr;
+}

Include the header file in `tgc.c`, to ensure the function signatures match.

~~~ 33. include-tgc-h
--- tgc.c
+++ tgc.c
@@ -1,3 +1,5 @@
+#include "tgc.h"
+
|void *tgc_alloc(size_t size) {
|  void *ptr = malloc(size);
|  return ptr;

TODO: update Makefile

Before we go on, let's add a *section comment* above our allocator function. This file will eventually grow to 400 lines, so grouping the functions into foldable sections will help keep the diffs in this tutorial shorter.

~~~ 34. section-allocator-functions
--- tgc.c
+++ tgc.c
@@ -1,5 +1,7 @@
|#include "tgc.h"
|
+/*** allocator functions ***/
+
|void *tgc_alloc(size_t size) {
|  void *ptr = malloc(size);
|  return ptr;

## Pointer table

We need a place to store the pointers returned by `malloc()`. We're going to create a data structure called the *pointer table* to store them in. The pointer table will be a dynamic array for now, and in a later chapter we will convert it to a hash table for much better performance.

For each pointer we store, we will also want to store some metadata about that pointer (like whether the garbage collector has marked it or not). We will store this data in a `tgc_ptr_t` struct, and so the pointer table will be an array of these structs.

~~~ 35. struct-tgc-ptr-t
--- tgc.h
+++ tgc.h
@@ -3,6 +3,10 @@
|
|#include <stdlib.h>
|
+typedef struct {
+  void *ptr;
+} tgc_ptr_t;
+
|void *tgc_alloc(size_t size);
|
|#endif

For now all we need is the pointer itself.

We'll store the dynamic array of `tgc_ptr_t`s directly in a struct called `tgc_t`. This struct will eventually contain all the global state needed by our garbage collector, hence the very general name `tgc_t`.

~~~ 36. struct-tgc-t
--- tgc.h
+++ tgc.h
@@ -7,6 +7,11 @@
|  void *ptr;
|} tgc_ptr_t;
|
+typedef struct {
+  tgc_ptr_t *items;
+  size_t nitems, nslots;
+} tgc_t;
+
|void *tgc_alloc(size_t size);
|
|#endif

`nitems` is the number of slots in the array that are in use, and `nslots` is the total number of slots available in the array. A slot whose `ptr` is `NULL` will be considered an unused slot.

`size_t` is an unsigned integer type that is used for array indexes and lengths.

It will be up to the user of the `tgc` library to decide where in memory to store this global state. In our todo app, let's store it in a global variable.

~~~ 37. static-gc
--- todo.c
+++ todo.c
@@ -3,6 +3,8 @@
|#include <string.h>
|#include "tgc.h"
|
+static tgc_t gc;
+
|typedef struct TodoItem {
|  char* description;
|  struct TodoItem* next;

You will then need to get `tgc` to initialize the global state by calling `tgc_start()`.

~~~ 38. call-tgc-start
--- todo.c
+++ todo.c
@@ -79,6 +79,8 @@
|  int quitting = 0;
|  TodoItem* todo = NULL;
|
+  tgc_start(&gc);
+
|  while (!quitting) {
|    todo_print(todo);
|

Let's declare `tgc_start()` in `tgc.h`.

~~~ 39. define-tgc-start
--- tgc.h
+++ tgc.h
@@ -12,6 +12,8 @@
|  size_t nitems, nslots;
|} tgc_t;
|
+void tgc_start(tgc_t *gc);
+
|void *tgc_alloc(size_t size);
|
|#endif

Finally, define `tgc_start()` to initialize the dynamic array to be an empty array.

~~~ 40. really-define-tgc-start
--- tgc.c
+++ tgc.c
@@ -1,5 +1,13 @@
|#include "tgc.h"
|
+/*** gc control ***/
+
+void tgc_start(tgc_t *gc) {
+  gc->nitems = 0;
+  gc->nslots = 0;
+  gc->items = NULL;
+}
+
|/*** allocator functions ***/
|
|void *tgc_alloc(size_t size) {

To store a new pointer into the pointer table, `tgc_alloc()` is going to need access to the global state. In fact, every public function in `tgc` is going to take the global state as its first argument from now on.

~~~ 41. tgc-alloc-takes-global-state-h
--- tgc.h
+++ tgc.h
@@ -14,6 +14,6 @@
|
|void tgc_start(tgc_t *gc);
|
-void *tgc_alloc(size_t size);
+void *tgc_alloc(tgc_t *gc, size_t size);
|
|#endif

~~~ 42. tgc-alloc-takes-global-state
--- tgc.c
+++ tgc.c
@@ -10,7 +10,7 @@
|
|/*** allocator functions ***/
|
-void *tgc_alloc(size_t size) {
+void *tgc_alloc(tgc_t *gc, size_t size) {
|  void *ptr = malloc(size);
|  return ptr;
|}

Now we'll call a helper function `tgc_add()`, which will add the new pointer to the pointer table.

~~~ 43. call-tgc-add
--- tgc.c
+++ tgc.c
@@ -12,5 +12,6 @@
|
|void *tgc_alloc(tgc_t *gc, size_t size) {
|  void *ptr = malloc(size);
+  tgc_add(gc, ptr);
|  return ptr;
|}

`tgc_add()` will call two more functions. `tgc_resize()` will ensure the dynamic array has at least one free slot, by growing the array if needed. `tgc_add_ptr()` will then add the pointer to the array, *assuming* that it will be able to find a free slot.

~~~ 44. define-tgc-add
--- tgc.c
+++ tgc.c
@@ -10,6 +10,12 @@
|
|/*** allocator functions ***/
|
+static void tgc_add(tgc_t *gc, void *ptr) {
+  gc->nitems++;
+  tgc_resize(gc);
+  tgc_add_ptr(gc, ptr);
+}
+
|void *tgc_alloc(tgc_t *gc, size_t size) {
|  void *ptr = malloc(size);
|  tgc_add(gc, ptr);

We increment `nitems` first, to tell `tgc_resize()` how many slots are needed in the table.

It may seem odd to have both `tgc_add()` and `tgc_add_ptr()` right now, but the reason for this split will become clear as we add more features. Think of `tgc_add_ptr()` as purely an "insert" operation on our pointer table data structure, and `tgc_add()` as a higher-level operation that takes care of anything else we need to do when adding a pointer (like triggering a garbage collection cycle!).

Let's go ahead and start writing `tgc_resize()`.

~~~ 45. define-tgc-resize
--- tgc.c
+++ tgc.c
@@ -1,5 +1,14 @@
|#include "tgc.h"
|
+/*** resize pointer table ***/
+
+static void tgc_resize(tgc_t *gc) {
+  if (gc->nslots >= gc->nitems) return;
+
+  gc->nslots = gc->nitems * 2;
+  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
+}
+
|/*** gc control ***/
|
|void tgc_start(tgc_t *gc) {

First we check if the array is already big enough. If so, we don't need to resize it and we can return immediately.

If we do need to resize it, we use the common strategy of doubling the current size. This might allocate a lot more space than we need, but it also means we won't have to do another resize operation for quite a while. Resizes are expensive because they involve allocating a whole new array and reinserting each item into the new array.

`calloc()` is important here, because it clears the allocated memory to all `0`s. This sets the `ptr` field of each `tgc_ptr_t` to `NULL`, which is how we know that slot is unused.

The next step is copy the old array's items into the new table.

~~~ 46. memcpy-pointer-table
--- tgc.c
+++ tgc.c
@@ -3,10 +3,15 @@
|/*** resize pointer table ***/
|
|static void tgc_resize(tgc_t *gc) {
+  tgc_ptr_t *old_items = gc->items;
+  size_t old_size = gc->nslots;
+
|  if (gc->nslots >= gc->nitems) return;
|
|  gc->nslots = gc->nitems * 2;
|  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
+
+  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
|}
|
|/*** gc control ***/

If this were a hash table, we would have to loop through the old table and reinsert each item into the new table with `tgc_add_ptr()`. For now, it works to copy the entire array at once with `memcpy()`.

`memcpy()` comes from `<string.h>`, so let's include it.

~~~ 47. include-string-h
--- tgc.h
+++ tgc.h
@@ -2,6 +2,7 @@
|#define TGC_H
|
|#include <stdlib.h>
+#include <string.h>
|
|typedef struct {
|  void *ptr;

The final step is to `free()` the old pointer table.

~~~ 48. free-old-pointer-table
--- tgc.c
+++ tgc.c
@@ -12,6 +12,8 @@
|  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
|
|  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
+
+  free(old_items);
|}
|
|/*** gc control ***/

Now that we've ensured we have at least one free slot in the table, we can implement `tgc_add_ptr()` to find a free slot and store the new pointer there.

~~~ 49. define-tgc-add-ptr
--- tgc.c
+++ tgc.c
@@ -1,5 +1,21 @@
|#include "tgc.h"
|
+/*** pointer table operations ***/
+
+static void tgc_add_ptr(tgc_t *gc, void *ptr) {
+  tgc_ptr_t item;
+  size_t i;
+
+  item.ptr = ptr;
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].ptr == NULL) {
+      gc->items[i] = item;
+      return;
+    }
+  }
+}
+
|/*** resize pointer table ***/
|
|static void tgc_resize(tgc_t *gc) {

Remember, a free slot is defined as one that has a `ptr` containing `NULL`. We do a linear search and store the new pointer in the first free slot we find.

TODO: what is this step?

~~~ 50. xxx-prevent-readding-a-pointer
--- tgc.c
+++ tgc.c
@@ -13,6 +13,7 @@
|      gc->items[i] = item;
|      return;
|    }
+    if (gc->items[i].ptr == item.ptr) { return; }
|  }
|}
|

`tgc_alloc()` should be successfully storing our pointers in the pointer table. Let's update `todo.c` to call `tgc_alloc()` properly, and then see if it still works!

~~~ 51. pass-gc-to-tgc-alloc
--- todo.c
+++ todo.c
@@ -24,11 +24,11 @@
|}
|
|TodoItem* todo_add(TodoItem* todo, const char* description) {
-  TodoItem* todo_item = (TodoItem*)tgc_alloc(sizeof(TodoItem));
+  TodoItem* todo_item = (TodoItem*)tgc_alloc(&gc, sizeof(TodoItem));
|  size_t len = strlen(description);
|
|  todo_item->next = todo;
-  todo_item->description = (char*)tgc_alloc(len + 1);
+  todo_item->description = (char*)tgc_alloc(&gc, len + 1);
|  strcpy(todo_item->description, description);
|
|  return todo_item;

Our todo app still works! But how do we know our pointer table is working?

## Operator interface

To see that our pointer table is working, we'll add an "operator interface" that gives us a view into the internal data structures of our garbage collector. We'll add a secret `p` (print) command to our todo app, which will call a `tgc_debug()` function provided by our library.

~~~ 52. call-tgc-debug
--- todo.c
+++ todo.c
@@ -103,6 +103,9 @@
|        case '/':
|          todo = todo_snip(todo, atoi(&input[1]));
|          break;
+        case 'p':
+          tgc_debug(&gc);
+          break;
|        case 'q':
|          quitting = 1;
|          break;

Let's declare `tgc_debug()` in `tgc.h`.

~~~ 53. declare-tgc-debug
--- tgc.h
+++ tgc.h
@@ -17,4 +17,6 @@
|
|void *tgc_alloc(tgc_t *gc, size_t size);
|
+void tgc_debug(tgc_t *gc);
+
|#endif

`tgc_debug()` will print out each field in the `tgc_t` struct, and each `tgc_ptr_t` struct in the pointer table.

~~~ 54. define-tgc-debug
--- tgc.c
+++ tgc.c
@@ -54,3 +54,19 @@
|  tgc_add(gc, ptr);
|  return ptr;
|}
+
+/*** debugging ***/
+
+static void tgc_debug_ptr(tgc_ptr_t *ptr) {
+  printf("  ptr = %p\n", ptr->ptr);
+}
+
+void tgc_debug(tgc_t *gc) {
+  printf("nitems = %zu\n", gc->nitems);
+  printf("nslots = %zu\n", gc->nslots);
+  for (size_t i = 0; i < gc->nslots; i++) {
+    printf("items[%zu] = {\n", i);
+    tgc_debug_ptr(&gc->items[i]);
+    printf("}\n");
+  }
+}

The `%p` format specifier prints out a pointer as hexademical (starting with `0x`), or `(nil)` if it's a `NULL` pointer (this may be different on your machine). `%zu` is the format specifier for `size_t`.

To use `printf()`, we need to include `<stdio.h>`.

~~~ 55. include-stdio-h
--- tgc.h
+++ tgc.h
@@ -1,6 +1,7 @@
|#ifndef TGC_H
|#define TGC_H
|
+#include <stdio.h>
|#include <stdlib.h>
|#include <string.h>
|

Now if you add some todo items, and run the `p` command, you should see that it's storing your `malloc()`'d pointers in the pointer table!

## Logging

Logging is another strategy we'll use to reveal what our garbage collector is doing behind the scenes. Whenever our garbage collector does something interesting, we'll have it print out a `[DEBUG]` message on the console.

Let's add one to `tgc_alloc()`.

~~~ 56. log-tgc-alloc
--- tgc.c
+++ tgc.c
@@ -51,6 +51,7 @@
|
|void *tgc_alloc(tgc_t *gc, size_t size) {
|  void *ptr = malloc(size);
+  printf("[DEBUG] allocated %zu bytes at %p\n", size, ptr);
|  tgc_add(gc, ptr);
|  return ptr;
|}

And another one for when the pointer table is resized.

~~~ 57. log-tgc-resize
--- tgc.c
+++ tgc.c
@@ -31,6 +31,9 @@
|  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
|
|  free(old_items);
+
+  printf("[DEBUG] resized pointer table from %zu to %zu slots\n",
+         old_size, gc->nslots);
|}
|
|/*** gc control ***/

## Pretty printing

TODO: move to operator interface section?

When we print out the pointer table, all we see are the memory addresses. That's not very satisfying. Wouldn't it be nice to see the `TodoItem`popular/?count=75&after=t3_c6vv6e structs and `description` strings that each pointer points to?

To accomplish this, we'll allow a user-defined `pretty_print()` function to be passed to `tgc_debug()`. It will take the `tgc_ptr_t` to be printed and will have to figure out what kind of object the pointer is pointing to and how to print it in a nice way.

So, let's add a `pretty_print` argument to `tgc_debug()` and rewrite `tgc_debug_ptr()` to call this function.

~~~ 58. call-pretty-print
--- tgc.c
+++ tgc.c
@@ -61,16 +61,21 @@
|
|/*** debugging ***/
|
-static void tgc_debug_ptr(tgc_ptr_t *ptr) {
-  printf("  ptr = %p\n", ptr->ptr);
+static void tgc_debug_ptr(tgc_ptr_t *ptr, void (*pretty_print)(tgc_ptr_t*)) {
+  printf("  ptr = %p", ptr->ptr);
+  if (ptr->ptr != NULL) {
+    printf(" ");
+    pretty_print(ptr);
+  }
+  printf("\n");
|}
|
-void tgc_debug(tgc_t *gc) {
+void tgc_debug(tgc_t *gc, void (*pretty_print)(tgc_ptr_t*)) {
|  printf("nitems = %zu\n", gc->nitems);
|  printf("nslots = %zu\n", gc->nslots);
|  for (size_t i = 0; i < gc->nslots; i++) {
|    printf("items[%zu] = {\n", i);
-    tgc_debug_ptr(&gc->items[i]);
+    tgc_debug_ptr(&gc->items[i], pretty_print);
|    printf("}\n");
|  }
|}

Function pointer types look really weird in C. `pretty_print` is the name of the argument, and its type is "pointer to a function that takes a `tgc_ptr_t*` and doesn't return anything". I guess the idea is to make the function type look the same as a function declaration.

Anyways, next let's update the header file to match.

~~~ 59. tgc-h-pretty-print
--- tgc.h
+++ tgc.h
@@ -18,6 +18,6 @@
|
|void *tgc_alloc(tgc_t *gc, size_t size);
|
-void tgc_debug(tgc_t *gc);
+void tgc_debug(tgc_t *gc, void (*pretty_print)(tgc_ptr_t*));
|
|#endif

TODO: use `0x70D0` magic number in `TodoList` struct instead (or maybe a single `0xff` byte is safer)

Now we're ready to use it in `todo.c`. Our todo app allocates two types of objects: `TodoItem` structs, and strings (for the `description`s). So our `pretty_print()` function will have to figure out which one the pointer points to, and then print out the object accordingly.

~~~ 60. define-pretty-print
--- todo.c
+++ todo.c
@@ -1,3 +1,4 @@
+#include <ctype.h>
|#include <stdio.h>
|#include <stdlib.h>
|#include <string.h>
@@ -74,6 +75,19 @@
|  return todo;
|}
|
+void pretty_print(tgc_ptr_t* ptr) {
+  char *byte = ptr->ptr;
+  while (isgraph(*byte)) { byte++; }
+
+  if (*byte == '\0') {
+    printf("string \"%s\"", ptr->ptr);
+  } else {
+    TodoItem* todo = (TodoItem*)ptr->ptr;
+    printf("TodoItem { description = \"%s\", next = %p }",
+           todo->description, todo->next);
+  }
+}
+
|int main() {
|  char input[1024];
|  int quitting = 0;
@@ -104,7 +118,7 @@
|          todo = todo_snip(todo, atoi(&input[1]));
|          break;
|        case 'p':
-          tgc_debug(&gc);
+          tgc_debug(&gc, pretty_print);
|          break;
|        case 'q':
|          quitting = 1;

Now we can see which objects are which in the pointer table when we run the `p` command!

TODO: move log-tgc-start to logging section

~~~ 61. log-tgc-start
--- tgc.c
+++ tgc.c
@@ -42,6 +42,8 @@
|  gc->nitems = 0;
|  gc->nslots = 0;
|  gc->items = NULL;
+
+  printf("[DEBUG] tgc start\n");
|}
|
|/*** allocator functions ***/

## Error handling

Now that we've confirmed that things are working as they should be, let's go back and add in some error handling.

It doesn't happen often, but `malloc()` and `calloc()` can fail if you run out of memory. In this case they return `NULL`. An easy way to trigger this is to pass an extremely large number to `malloc()`.

For our library to be taken seriously, we should handle this error case. If `malloc()` returns `NULL`, then `tgc_alloc()` should return `NULL` and shouldn't try to store `NULL` in the pointer table.

~~~ 62. handle-malloc-error
--- tgc.c
+++ tgc.c
@@ -56,8 +56,10 @@
|
|void *tgc_alloc(tgc_t *gc, size_t size) {
|  void *ptr = malloc(size);
-  printf("[DEBUG] allocated %zu bytes at %p\n", size, ptr);
-  tgc_add(gc, ptr);
+  if (ptr != NULL) {
+    printf("[DEBUG] allocated %zu bytes at %p\n", size, ptr);
+    tgc_add(gc, ptr);
+  }
|  return ptr;
|}
|

We also call `calloc()` in `tgc_resize()`. If this fails, then `tgc_resize()` is unable to do its job of growing the table. To report this failure back to its caller, it will now return `1` on success and `0` on failure.

~~~ 63. handle-calloc-error
--- tgc.c
+++ tgc.c
@@ -19,21 +19,29 @@
|
|/*** resize pointer table ***/
|
-static void tgc_resize(tgc_t *gc) {
+static int tgc_resize(tgc_t *gc) {
|  tgc_ptr_t *old_items = gc->items;
|  size_t old_size = gc->nslots;
|
-  if (gc->nslots >= gc->nitems) return;
+  if (gc->nslots >= gc->nitems) return 1;
|
|  gc->nslots = gc->nitems * 2;
|  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
|
+  if (gc->items == NULL) {
+    gc->nslots = old_size;
+    gc->items = old_items;
+    return 0;
+  }
+
|  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
|
|  free(old_items);
|
|  printf("[DEBUG] resized pointer table from %zu to %zu slots\n",
|         old_size, gc->nslots);
+
+  return 1;
|}
|
|/*** gc control ***/

Now `tgc_add()` has to handle the possible failure of `tgc_resize()`. If the resize failed, that means the table is still full and we can't add another pointer to the table. So `tgc_add()` can't do its job, and should return `NULL` to indicate failure.

~~~ 64. handle-tgc-resize-error
--- tgc.c
+++ tgc.c
@@ -56,10 +56,17 @@
|
|/*** allocator functions ***/
|
-static void tgc_add(tgc_t *gc, void *ptr) {
+static void *tgc_add(tgc_t *gc, void *ptr) {
|  gc->nitems++;
-  tgc_resize(gc);
-  tgc_add_ptr(gc, ptr);
+
+  if (tgc_resize(gc)) {
+    tgc_add_ptr(gc, ptr);
+    return ptr;
+  } else {
+    gc->nitems--;
+    free(ptr);
+    return NULL;
+  }
|}
|
|void *tgc_alloc(tgc_t *gc, size_t size) {

Finally, if `tgc_add()` failed, then `tgc_alloc()` should fail by returning `NULL`. Since `tgc_add()` returns the added pointer, we can just return the same thing it returned.

~~~ 65. handle-tgc-add-error
--- tgc.c
+++ tgc.c
@@ -73,7 +73,7 @@
|  void *ptr = malloc(size);
|  if (ptr != NULL) {
|    printf("[DEBUG] allocated %zu bytes at %p\n", size, ptr);
-    tgc_add(gc, ptr);
+    ptr = tgc_add(gc, ptr);
|  }
|  return ptr;
|}

## Sweep

Now that we're keeping track of every memory allocation in the pointer table, all that is left to do is `free()` them at the end of the program. We will do this when the user program calls `tgc_stop()`, signalling that they are done with the garbage collector and all of the memory allocated through it.

Let's call `tgc_stop()` right before our todo app quits.

~~~ 66. call-tgc-stop
--- todo.c
+++ todo.c
@@ -137,5 +137,7 @@
|    }
|  }
|
+  tgc_stop(&gc);
+
|  return 0;
|}

Declare it in `tgc.h` right next to `tgc_start()`.

~~~ 67. declare-tgc-stop
--- tgc.h
+++ tgc.h
@@ -15,6 +15,7 @@
|} tgc_t;
|
|void tgc_start(tgc_t *gc);
+void tgc_stop(tgc_t *gc);
|
|void *tgc_alloc(tgc_t *gc, size_t size);
|

What it will do is run `tgc_sweep()` to sweep up all the garbage (assuming every allocation is garbage at this point), and clean up the `tgc_t` struct by `free()`ing the pointer table.

~~~ 68. define-tgc-stop
--- tgc.c
+++ tgc.c
@@ -54,6 +54,14 @@
|  printf("[DEBUG] tgc start\n");
|}
|
+void tgc_stop(tgc_t *gc) {
+  printf("[DEBUG] running sweep phase without marking anything\n");
+  tgc_sweep(gc);
+  free(gc->items);
+
+  printf("[DEBUG] tgc stop\n");
+}
+
|/*** allocator functions ***/
|
|static void *tgc_add(tgc_t *gc, void *ptr) {

`tgc_sweep()` will loop through the pointer table, calling `free()` on every pointer it finds.

~~~ 69. tgc-sweep
--- tgc.c
+++ tgc.c
@@ -44,6 +44,22 @@
|  return 1;
|}
|
+/*** mark and sweep ***/
+
+static void tgc_sweep(tgc_t *gc) {
+  size_t i;
+
+  printf("[DEBUG] starting sweep phase\n");
+
+  for (i = 0; i < gc->nslots; i++) {
+    if (gc->items[i].ptr == NULL) { continue; }
+    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);
+    free(gc->items[i].ptr);
+    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+    gc->nitems--;
+  }
+}
+
|/*** gc control ***/
|
|void tgc_start(tgc_t *gc) {

After calling `free()`, we need to remove the pointer from the pointer table. (This will become important when we're collecting garbage in the middle of a program's execution rather than just at the end.)

To remove an item from the table, we `memset()` its struct to contain all `0`s. This has the effect of setting `ptr` to `NULL`, and setting any other fields we add to `0` as well. We also need to manually update the total number of slots in use, by decrementing `nitems`.

With that, our todo app should no longer be leaking any memory, despite not calling `free()`! As always, you can verify this with `valgrind ./todo`.

We've satisfied the one hard requirement of a garbage collector, which is that it frees all allocated memory *at some point*. All we have to do now is satisfy the more fuzzy requirement of freeing memory *soon after it becomes unused*, rather than waiting until the end of the program's life. This is where things get interesting!

In the [next chapter](mark.html), we'll implement a *mark phase* which will allow us to identify garbage and collect it during the normal execution of our program.

TODO: what is this step

~~~ 70. xxx-return-early-if-nothing-to-sweep
--- tgc.c
+++ tgc.c
@@ -51,6 +51,8 @@
|
|  printf("[DEBUG] starting sweep phase\n");
|
+  if (gc->nitems == 0) { return; }
+
|  for (i = 0; i < gc->nslots; i++) {
|    if (gc->items[i].ptr == NULL) { continue; }
|    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);

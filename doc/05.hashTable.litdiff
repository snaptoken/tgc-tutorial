# Hash table

Our garbage collector works, but if we started using it in a real-world application that allocates a lot of memory, we would find that it's quite slow. This is due to our choice of data structure for our pointer table. We went with a dynamic array for simplicity, and every time `tgc_mark_ptr()` is called it has to do a linear search through the entire array.

A much better data structure for our purposes is a *hash table*. Searching a hash table is an O(1) operation (on average), meaning it's fast no matter how large the table is. Linear search, on the other hand, is O(n) meaning it gets slower as the table gets bigger.

In this chapter we'll gradually convert our dynamic array into a hash table --- specifically a variant called "Robin Hood hashing". As we do so, we'll be running a stress test on our garbage collector to see how much the hash table speeds it up.

## Stress test

Create a new file called `stress_test.c`. The stress test will continuously allocate memory, storing references to the memory in an array called `data`. After a while, the array will fill up and we'll start back from the beginning, overwriting the reference that was there previously, When a reference is overwritten, it will become garbage to be collected.

~~~ 122. stress-test
--- /dev/null
+++ stress_test.c
@@ -0,0 +1,24 @@
+#include "tgc.h"
+
+#define MAX_LIVE_ALLOCATIONS 10000
+#define TOTAL_ALLOCATIONS    100000
+
+static tgc_t gc;
+
+void stress_test() {
+  char **data = tgc_alloc(&gc, MAX_LIVE_ALLOCATIONS * sizeof(char*));
+
+  for (int i = 0; i < TOTAL_ALLOCATIONS; i++) {
+    data[i % MAX_LIVE_ALLOCATIONS] = tgc_alloc(&gc, 16);
+  }
+}
+
+int main(int argc, char **argv) {
+  tgc_start(&gc, &argc);
+
+  stress_test();
+
+  tgc_stop(&gc);
+
+  return 0;
+}

`MAX_LIVE_ALLOCATIONS` is the size we want the pointer table to grow to before we start creating garbage by overwriting references in the `data` array. `TOTAL_ALLOCATIONS` is the number of times `tgc_alloc()` will be called.

TODO: Makefile rule for this? and for the `time` command?

Run the stress test by running `make stress_test` and then `time ./stress_test >/dev/null`. The `>/dev/null` ignores all the debug output of `tgc`, which would otherwise slow down the program even more. `time` will measure the amount of time it takes for the stress test to finish.

On my machine it takes X seconds to finish. If it takes much longer or shorter on your machine, you can try tweaking the two constants to get it closer to a reasonable amount of time to test with.

## Speeding up linear search

Right now we always search through the pointer table starting from the *beginning* of the array. What if we could roughly guess *where* in the array a given pointer was stored, and start our linear search from there instead? We would find the pointer much faster in most cases.

So how can we guess where a given pointer was inserted in the array? If the insert operation follows a rule to decide where in the array to insert a given pointer, then the search operation can follow that same rule to know where to start looking for that pointer.

We need a function that takes a pointer and returns an *ideal index* in which to store that pointer. Then both the insert operation and the search operation can call this function to know where to insert or look for that pointer in the array. This function is called a *hash function*.

If the *ideal index* is already occupied in the array, we'll search for the next available empty slot and insert the pointer there. Two or more pointers with the same ideal index is called a *collision* and means the search operation will have to work a little harder to find the pointer it's looking for, since it can't be in its ideal position. A good hash function minimizes collisions by ensuring that the ideal indexes it returns tend to spread out uniformly over the array.

That said, here is `tgc`'s hash function:

~~~ 123. tgc-hash
--- tgc.c
+++ tgc.c
@@ -2,6 +2,10 @@
|
|/*** pointer table operations ***/
|
+static size_t tgc_hash(void *ptr) {
+  return ((uintptr_t)ptr) >> 3;
+}
+
|static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
|  tgc_ptr_t item;
|  size_t i;

I guess pointers returned by `malloc()` are already random enough that the pointers can almost act as their own hash! The `>> 3` removes the lowest 3 bits of the pointer, because the memory addresses that things start on are usually multiples of 8, which means the lowest 3 bits are always `0`.

The hash function doesn't return an array index directly. Instead, it returns a very large number and we're expected to map that number to a valid array index using the *modulo* operator with the size of our array. In other words: `ideal_index = tgc_hash(ptr) % gc->nslots`.

Now that have our hash function and a whole lot of theory, let's update `tgc_add_ptr()` to use it.

~~~ 124. add-ptr-use-hash
--- tgc.c
+++ tgc.c
@@ -10,16 +10,19 @@
|  tgc_ptr_t item;
|  size_t i;
|
+  i = tgc_hash(ptr) % gc->nslots;
+
|  item.ptr = ptr;
|  item.mark = 0;
|  item.size = size;
|
-  for (i = 0; i < gc->nslots; i++) {
+  while (1) {
|    if (gc->items[i].ptr == NULL) {
|      gc->items[i] = item;
|      return;
|    }
|    if (gc->items[i].ptr == item.ptr) { return; }
+    i = (i+1) % gc->nslots;
|  }
|}
|

We changed the `for` loop into a `while` loop to make it easier for `i` to wrap around to the beginning of the array once it reaches the end. The only other change is that it *starts* its search at the ideal index for that pointer.

Now let's do the same thing for the search operation in `tgc_mark_ptr()`.

~~~ 125. mark-ptr-use-hash
--- tgc.c
+++ tgc.c
@@ -56,12 +56,16 @@
|/*** mark and sweep ***/
|
|static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i, k;
+  size_t i, j, k;
|
|  if ((uintptr_t)ptr < gc->minptr
|  ||  (uintptr_t)ptr > gc->maxptr) { return; }
|
-  for (i = 0; i < gc->nslots; i++) {
+  i = tgc_hash(ptr) % gc->nslots;
+  j = 0;
+
+  while (1) {
+    if (j == gc->nslots) { return; }
|    if (ptr == gc->items[i].ptr) {
|      if (gc->items[i].mark) { return; }
|      gc->items[i].mark = 1;
@@ -71,6 +75,8 @@
|      }
|      return;
|    }
+    i = (i+1) % gc->nslots;
+    j++;
|  }
|}
|

Once again, we converted the `for` loop into a `while` loop that starts its search at the ideal index. We needed a new variable `j` to keep track of how many slots we've searched, so we know when to stop.

Because the ideal indexes depend on the total size of the pointer table (`nslots`), it's not good enough anymore to just copy the array when the pointer table is resized. Instead, we'll have to reinsert each pointer into the new pointer table, so that they end up near their new ideal indexes.

~~~ 126. resize-readd-ptrs
--- tgc.c
+++ tgc.c
@@ -29,6 +29,7 @@
|/*** resize pointer table ***/
|
|static int tgc_resize(tgc_t *gc) {
+  size_t i;
|  tgc_ptr_t *old_items = gc->items;
|  size_t old_size = gc->nslots;
|
@@ -43,7 +44,11 @@
|    return 0;
|  }
|
-  memcpy(gc->items, old_items, old_size * sizeof(tgc_ptr_t));
+  for (i = 0; i < old_size; i++) {
+    if (old_items[i].ptr != NULL) {
+      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size);
+    }
+  }
|
|  free(old_items);
|

TODO: did it speed up the stress test (each step)?

## Linear probing

We've sped up searching the pointer table quite a bit, using a hash function to determine ideal indexes. But one case that this hasn't sped up, is when we try to search for a pointer that isn't in the pointer table. If the pointer doesn't exist, we have to loop through the entire array to be sure that it isn't there.

What if we stopped the linear search as soon as it found an empty slot? This would work as long as we only inserted pointers into the table, and didn't remove any. In that case their would never be any empty slots in between a pointer's ideal position and its actual position. But as soon as we remove a pointer, its slot becomes empty, and it could easily be an empty slot in between another pointer's ideal position and actual position.

Is there a way to keep the invariant that a pointer's ideal position and actual position never have an empty slot between them? Well, when an item is removed, we could try shifting all the items after it back a slot, to fill in the empty slot. This would also move each of those items closer to their ideal position.

There's one problem: if one of those items is already in their ideal position, we really don't want to move it back one, because then it would be in the worst position possible. The linear search would start at the ideal position, and have to loop all the way around the array to find it in this position. So we'll stop moving items backwards as soon as we come across an item in its ideal position.

Unfortunately, there could still be an item after the stopping point whose ideal position is before the empty slot, in which case the invariant is broken. We'll fix this case a little later, using a strategy called Robin Hood hashing.

Let's start by converting the `for` loop in `tgc_sweep()` into a `while` loop.

~~~ 127. sweep-while-loop
--- tgc.c
+++ tgc.c
@@ -124,9 +124,10 @@
|
|  if (gc->nitems == 0) { return; }
|
-  for (i = 0; i < gc->nslots; i++) {
-    if (gc->items[i].ptr == NULL) { continue; }
-    if (gc->items[i].mark)        { continue; }
+  i = 0;
+  while (i < gc->nslots) {
+    if (gc->items[i].ptr == NULL) { i++; continue; }
+    if (gc->items[i].mark)        { i++; continue; }
|    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);
|    free(gc->items[i].ptr);
|    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));

Now when we remove an item from the pointer table, we'll shift each following item back one until we hit an empty slot or an item that's in its ideal position.

~~~ 128. linear-probing-invariant
--- tgc.c
+++ tgc.c
@@ -118,7 +118,7 @@
|}
|
|static void tgc_sweep(tgc_t *gc) {
-  size_t i;
+  size_t i, j, nj, nh;
|
|  printf("[DEBUG] starting sweep phase\n");
|
@@ -131,6 +131,19 @@
|    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);
|    free(gc->items[i].ptr);
|    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
+
+    j = i;
+    while (1) {
+      nj = (j+1) % gc->nslots;
+      nh = tgc_hash(gc->items[nj].ptr) % gc->nslots;
+      if (gc->items[nj].ptr != NULL && nh != nj) {
+        memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
+        memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
+        j = nj;
+      } else {
+        break;
+      }
+    }
|    gc->nitems--;
|  }
|

With that, we can now cut off our linear search in `tgc_mark_ptr()` as soon as it sees an empty slot.

~~~ 129. mark-ptr-stop-search-early
--- tgc.c
+++ tgc.c
@@ -70,7 +70,7 @@
|  j = 0;
|
|  while (1) {
-    if (j == gc->nslots) { return; }
+    if (gc->items[i].ptr == NULL || j == gc->nslots) { return; }
|    if (ptr == gc->items[i].ptr) {
|      if (gc->items[i].mark) { return; }
|      gc->items[i].mark = 1;

This assumes that the case I pointed out above, where the invariant is broken, won't happen. I didn't quite think this through properly, so our pointer table is technically broken until we fix it in the Robin Hood hashing section later in this chapter.

## Cache the hash

~~~ 130. add-hash
--- tgc.h
+++ tgc.h
@@ -10,7 +10,7 @@
|typedef struct {
|  void *ptr;
|  int mark;
-  size_t size;
+  size_t size, hash;
|} tgc_ptr_t;
|
|typedef struct {

~~~ 131. set-hash
--- tgc.c
+++ tgc.c
@@ -15,6 +15,7 @@
|  item.ptr = ptr;
|  item.mark = 0;
|  item.size = size;
+  item.hash = i+1;
|
|  while (1) {
|    if (gc->items[i].ptr == NULL) {

~~~ 132. debug-hash
--- tgc.c
+++ tgc.c
@@ -235,6 +235,7 @@
|
|  printf("  mark = %d\n", ptr->mark);
|  printf("  size = %zu\n", ptr->size);
+  printf("  hash = %zu\n", ptr->hash);
|}
|
|void tgc_debug(tgc_t *gc, void (*pretty_print)(tgc_ptr_t*)) {

## Use `hash` to determine if slots are empty

~~~ 133. add-ptr-hash-zero
--- tgc.c
+++ tgc.c
@@ -8,7 +8,7 @@
|
|static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
|  tgc_ptr_t item;
-  size_t i;
+  size_t i, h;
|
|  i = tgc_hash(ptr) % gc->nslots;
|
@@ -18,10 +18,8 @@
|  item.hash = i+1;
|
|  while (1) {
-    if (gc->items[i].ptr == NULL) {
-      gc->items[i] = item;
-      return;
-    }
+    h = gc->items[i].hash;
+    if (h == 0) { gc->items[i] = item; return; }
|    if (gc->items[i].ptr == item.ptr) { return; }
|    i = (i+1) % gc->nslots;
|  }

~~~ 134. resize-hash-zero
--- tgc.c
+++ tgc.c
@@ -44,7 +44,7 @@
|  }
|
|  for (i = 0; i < old_size; i++) {
-    if (old_items[i].ptr != NULL) {
+    if (old_items[i].hash != 0) {
|      tgc_add_ptr(gc, old_items[i].ptr, old_items[i].size);
|    }
|  }

~~~ 135. mark-ptr-hash-zero
--- tgc.c
+++ tgc.c
@@ -60,7 +60,7 @@
|/*** mark and sweep ***/
|
|static void tgc_mark_ptr(tgc_t *gc, void *ptr) {
-  size_t i, j, k;
+  size_t i, j, h, k;
|
|  if ((uintptr_t)ptr < gc->minptr
|  ||  (uintptr_t)ptr > gc->maxptr) { return; }
@@ -69,7 +69,8 @@
|  j = 0;
|
|  while (1) {
-    if (gc->items[i].ptr == NULL || j == gc->nslots) { return; }
+    h = gc->items[i].hash;
+    if (h == 0 || j == gc->nslots) { return; }
|    if (ptr == gc->items[i].ptr) {
|      if (gc->items[i].mark) { return; }
|      gc->items[i].mark = 1;

~~~ 136. sweep-hash-zero
--- tgc.c
+++ tgc.c
@@ -126,8 +126,8 @@
|
|  i = 0;
|  while (i < gc->nslots) {
-    if (gc->items[i].ptr == NULL) { i++; continue; }
-    if (gc->items[i].mark)        { i++; continue; }
+    if (gc->items[i].hash == 0) { i++; continue; }
+    if (gc->items[i].mark)      { i++; continue; }
|    printf("[DEBUG] freeing %p\n", gc->items[i].ptr);
|    free(gc->items[i].ptr);
|    memset(&gc->items[i], 0, sizeof(tgc_ptr_t));
@@ -135,8 +135,8 @@
|    j = i;
|    while (1) {
|      nj = (j+1) % gc->nslots;
-      nh = tgc_hash(gc->items[nj].ptr) % gc->nslots;
-      if (gc->items[nj].ptr != NULL && nh != nj) {
+      nh = gc->items[nj].hash;
+      if (nh != 0 && nh-1 != nj) {
|        memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
|        memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
|        j = nj;

## Robin Hood hashing

~~~ 137. tgc-probe
--- tgc.c
+++ tgc.c
@@ -6,6 +6,12 @@
|  return ((uintptr_t)ptr) >> 3;
|}
|
+static size_t tgc_probe(tgc_t *gc, size_t i, size_t h) {
+  long v = i - (h-1);
+  if (v < 0) { v = gc->nslots + v; }
+  return v;
+}
+
|static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
|  tgc_ptr_t item;
|  size_t i, h;

~~~ 138. sweep-robin-hood
--- tgc.c
+++ tgc.c
@@ -142,7 +142,7 @@
|    while (1) {
|      nj = (j+1) % gc->nslots;
|      nh = gc->items[nj].hash;
-      if (nh != 0 && nh-1 != nj) {
+      if (nh != 0 && tgc_probe(gc, nj, nh) > 0) {
|        memcpy(&gc->items[ j], &gc->items[nj], sizeof(tgc_ptr_t));
|        memset(&gc->items[nj],              0, sizeof(tgc_ptr_t));
|        j = nj;

~~~ 139. add-ptr-count-iterations
--- tgc.c
+++ tgc.c
@@ -14,9 +14,10 @@
|
|static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
|  tgc_ptr_t item;
-  size_t i, h;
+  size_t i, j, h;
|
|  i = tgc_hash(ptr) % gc->nslots;
+  j = 0;
|
|  item.ptr = ptr;
|  item.mark = 0;
@@ -28,6 +29,7 @@
|    if (h == 0) { gc->items[i] = item; return; }
|    if (gc->items[i].ptr == item.ptr) { return; }
|    i = (i+1) % gc->nslots;
+    j++;
|  }
|}
|

~~~ 140. add-ptr-probe
--- tgc.c
+++ tgc.c
@@ -14,7 +14,7 @@
|
|static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
|  tgc_ptr_t item;
-  size_t i, j, h;
+  size_t i, j, h, p;
|
|  i = tgc_hash(ptr) % gc->nslots;
|  j = 0;
@@ -28,6 +28,7 @@
|    h = gc->items[i].hash;
|    if (h == 0) { gc->items[i] = item; return; }
|    if (gc->items[i].ptr == item.ptr) { return; }
+    p = tgc_probe(gc, i, h);
|    i = (i+1) % gc->nslots;
|    j++;
|  }

~~~ 141. add-ptr-robin-hood
--- tgc.c
+++ tgc.c
@@ -13,7 +13,7 @@
|}
|
|static void tgc_add_ptr(tgc_t *gc, void *ptr, size_t size) {
-  tgc_ptr_t item;
+  tgc_ptr_t item, tmp;
|  size_t i, j, h, p;
|
|  i = tgc_hash(ptr) % gc->nslots;
@@ -29,6 +29,12 @@
|    if (h == 0) { gc->items[i] = item; return; }
|    if (gc->items[i].ptr == item.ptr) { return; }
|    p = tgc_probe(gc, i, h);
+    if (j >= p) {
+      tmp = gc->items[i];
+      gc->items[i] = item;
+      item = tmp;
+      j = p;
+    }
|    i = (i+1) % gc->nslots;
|    j++;
|  }

~~~ 142. mark-ptr-robin-hood
--- tgc.c
+++ tgc.c
@@ -85,7 +85,7 @@
|
|  while (1) {
|    h = gc->items[i].hash;
-    if (h == 0 || j == gc->nslots) { return; }
+    if (h == 0 || j > tgc_probe(gc, i, h)) { return; }
|    if (ptr == gc->items[i].ptr) {
|      if (gc->items[i].mark) { return; }
|      gc->items[i].mark = 1;

~~~ 143. more-stress
--- stress_test.c
+++ stress_test.c
@@ -1,7 +1,7 @@
|#include "tgc.h"
|
-#define MAX_LIVE_ALLOCATIONS 10000
-#define TOTAL_ALLOCATIONS    100000
+#define MAX_LIVE_ALLOCATIONS 1000000
+#define TOTAL_ALLOCATIONS    10000000
|
|static tgc_t gc;
|

## Smarter hash table resizing

~~~ 144. add-loadfactor
--- tgc.h
+++ tgc.h
@@ -18,7 +18,7 @@
|  int paused;
|  uintptr_t minptr, maxptr;
|  tgc_ptr_t *items;
-  double sweepfactor;
+  double loadfactor, sweepfactor;
|  size_t nitems, nslots, mitems;
|} tgc_t;
|

~~~ 145. init-loadfactor
--- tgc.c
+++ tgc.c
@@ -180,6 +180,7 @@
|  gc->items = NULL;
|  gc->minptr = UINTPTR_MAX;
|  gc->maxptr = 0;
+  gc->loadfactor = 0.9;
|  gc->sweepfactor = 0.5;
|
|  printf("[DEBUG] tgc start\n");

~~~ 146. debug-loadfactor
--- tgc.c
+++ tgc.c
@@ -258,6 +258,7 @@
|  printf("paused = %d\n", gc->paused);
|  printf("minptr = %p\n", gc->minptr);
|  printf("maxptr = %p\n", gc->maxptr);
+  printf("loadfactor = %lf\n", gc->loadfactor);
|  printf("sweepfactor = %lf\n", gc->sweepfactor);
|  printf("nitems = %zu\n", gc->nitems);
|  printf("nslots = %zu\n", gc->nslots);

~~~ 147. ideal-size
--- tgc.c
+++ tgc.c
@@ -42,6 +42,10 @@
|
|/*** resize pointer table ***/
|
+static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
+  return (size_t)((double)(size+1) / gc->loadfactor);
+}
+
|static int tgc_resize(tgc_t *gc) {
|  size_t i;
|  tgc_ptr_t *old_items = gc->items;

~~~ 148. resize-more
--- tgc.c
+++ tgc.c
@@ -76,6 +76,12 @@
|  return 1;
|}
|
+static int tgc_resize_more(tgc_t *gc) {
+  size_t new_size = tgc_ideal_size(gc, gc->nitems);
+  size_t old_size = gc->nslots;
+  return (new_size > old_size) ? tgc_rehash(gc, new_size) : 1;
+}
+
|/*** mark and sweep ***/
|
|static void tgc_mark_ptr(tgc_t *gc, void *ptr) {

~~~ 149. rehash
--- tgc.c
+++ tgc.c
@@ -46,14 +46,14 @@
|  return (size_t)((double)(size+1) / gc->loadfactor);
|}
|
-static int tgc_resize(tgc_t *gc) {
+static int tgc_rehash(tgc_t *gc, size_t new_size) {
|  size_t i;
|  tgc_ptr_t *old_items = gc->items;
|  size_t old_size = gc->nslots;
|
|  if (gc->nslots >= gc->nitems) return 1;
|
-  gc->nslots = gc->nitems * 2;
+  gc->nslots = new_size;
|  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
|
|  if (gc->items == NULL) {

~~~ 150. use-resize-more
--- tgc.c
+++ tgc.c
@@ -226,7 +226,7 @@
|  gc->minptr = ((uintptr_t)ptr)        < gc->minptr ?
|    ((uintptr_t)ptr)        : gc->minptr;
|
-  if (tgc_resize(gc)) {
+  if (tgc_resize_more(gc)) {
|    tgc_add_ptr(gc, ptr, size);
|    if (!gc->paused && gc->nitems > gc->mitems) {
|      tgc_run(gc);

~~~ 151. add-primes
--- tgc.c
+++ tgc.c
@@ -42,6 +42,19 @@
|
|/*** resize pointer table ***/
|
+enum {
+  TGC_PRIMES_COUNT = 24
+};
+
+static const size_t tgc_primes[TGC_PRIMES_COUNT] = {
+  0,       1,       5,       11,
+  23,      53,      101,     197,
+  389,     683,     1259,    2417,
+  4733,    9371,    18617,   37097,
+  74093,   148073,  296099,  592019,
+  1100009, 2200013, 4400021, 8800019
+};
+
|static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
|  return (size_t)((double)(size+1) / gc->loadfactor);
|}

~~~ 152. use-primes
--- tgc.c
+++ tgc.c
@@ -56,7 +56,12 @@
|};
|
|static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
-  return (size_t)((double)(size+1) / gc->loadfactor);
+  size_t i;
+  size = (size_t)((double)(size+1) / gc->loadfactor);
+  for (i = 0; i < TGC_PRIMES_COUNT; i++) {
+    if (tgc_primes[i] >= size) { return tgc_primes[i]; }
+  }
+  return 0;
|}
|
|static int tgc_rehash(tgc_t *gc, size_t new_size) {

~~~ 153. fix-large-sizes
--- tgc.c
+++ tgc.c
@@ -56,11 +56,15 @@
|};
|
|static size_t tgc_ideal_size(tgc_t *gc, size_t size) {
-  size_t i;
+  size_t i, last;
|  size = (size_t)((double)(size+1) / gc->loadfactor);
|  for (i = 0; i < TGC_PRIMES_COUNT; i++) {
|    if (tgc_primes[i] >= size) { return tgc_primes[i]; }
|  }
+  last = tgc_primes[TGC_PRIMES_COUNT-1];
+  for (i = 0;; i++) {
+    if (last * i >= size) { return last * i; }
+  }
|  return 0;
|}
|

~~~ 154. resize-less
--- tgc.c
+++ tgc.c
@@ -104,6 +104,12 @@
|  return (new_size > old_size) ? tgc_rehash(gc, new_size) : 1;
|}
|
+static int tgc_resize_less(tgc_t *gc) {
+  size_t new_size = tgc_ideal_size(gc, gc->nitems);
+  size_t old_size = gc->nslots;
+  return (new_size < old_size) ? tgc_rehash(gc, new_size) : 1;
+}
+
|/*** mark and sweep ***/
|
|static void tgc_mark_ptr(tgc_t *gc, void *ptr) {

~~~ 155. call-resize-less
--- tgc.c
+++ tgc.c
@@ -204,6 +204,8 @@
|    gc->items[i].mark = 0;
|  }
|
+  tgc_resize_less(gc);
+
|  gc->mitems = gc->nitems + (size_t)(gc->nitems * gc->sweepfactor) + 1;
|}
|

~~~ 156. xxx-rehash-fix
--- tgc.c
+++ tgc.c
@@ -73,8 +73,6 @@
|  tgc_ptr_t *old_items = gc->items;
|  size_t old_size = gc->nslots;
|
-  if (gc->nslots >= gc->nitems) return 1;
-
|  gc->nslots = new_size;
|  gc->items = calloc(gc->nslots, sizeof(tgc_ptr_t));
|


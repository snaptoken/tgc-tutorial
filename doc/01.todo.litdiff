# Linked todo list

It's nice to build things in small, satisfying steps. To be able to run the code after making each change, and immediately *see* the change in action.

This gets a bit tricky when building a garbage collector. Garbage collectors are very behind-the-scenes. If it's doing its job well, then there are no observable effects to the user. If it's not doing its job well, then you might see drops in performance, or your program might leak memory until it eventually runs out. But you'd need a very resource-intensive program to get into either of these situations.

To gain visibility into the thing we are building, we'll use *print statements* that reveal what the garbage collector is doing. To test it, we'll build a little todo app that stores the todo list as a linked list. Linked lists are known for being the least desirable data structure for most use cases, but it turns out they are perfect for testing a garbage collector.

We'll also build a super secret *operator interface* into our app, which lets you see the entire state of the garbage collector at any time, if you know what command to type.

## Let's start things off...

...with a `main()`!

~~~ 1. main
--- /dev/null
+++ todo.c
@@ -0,0 +1,3 @@
+int main() {
+  return 0;
+}

~~~ 2. q to quit
--- todo.c
+++ todo.c
@@ -1,3 +1,18 @@
+#include <stdio.h>
+
|int main() {
+  char input[1024];
+  int quitting = 0;
+
+  while (!quitting) {
+    if (fgets(input, sizeof(input) - 1, stdin)) {
+      switch (input[0]) {
+        case 'q':
+          quitting = 1;
+          break;
+      }
+    }
+  }
+
|  return 0;
|}

~~~ 3. prompt
--- todo.c
+++ todo.c
@@ -5,6 +5,9 @@
|  int quitting = 0;
|
|  while (!quitting) {
+    printf("todo> ");
+    fflush(stdout);
+
|    if (fgets(input, sizeof(input) - 1, stdin)) {
|      switch (input[0]) {
|        case 'q':

~~~ 4. handle eof
--- todo.c
+++ todo.c
@@ -15,6 +15,11 @@
|          break;
|      }
|    }
+
+    if (feof(stdin)) {
+      printf("\n");
+      quitting = 1;
+    }
|  }
|
|  return 0;

~~~ 5. todo struct
--- todo.c
+++ todo.c
@@ -1,5 +1,10 @@
|#include <stdio.h>
|
+typedef struct TodoItem {
+  char* description;
+  struct TodoItem* next;
+} TodoItem;
+
|int main() {
|  char input[1024];
|  int quitting = 0;

~~~ 6. todo list head
--- todo.c
+++ todo.c
@@ -8,6 +8,7 @@
|int main() {
|  char input[1024];
|  int quitting = 0;
+  TodoItem* todo = NULL;
|
|  while (!quitting) {
|    printf("todo> ");

~~~ 7. call todo_add
--- todo.c
+++ todo.c
@@ -16,6 +16,9 @@
|
|    if (fgets(input, sizeof(input) - 1, stdin)) {
|      switch (input[0]) {
+        case '+':
+          todo = todo_add(todo, &input[1]);
+          break;
|        case 'q':
|          quitting = 1;
|          break;

~~~ 8. implement todo_add
--- todo.c
+++ todo.c
@@ -5,6 +5,17 @@
|  struct TodoItem* next;
|} TodoItem;
|
+TodoItem* todo_add(TodoItem* todo, const char* description) {
+  TodoItem* todo_item = (TodoItem*)malloc(sizeof(TodoItem));
+  size_t len = strlen(description);
+
+  todo_item->next = todo;
+  todo_item->description = (char*)malloc(len + 1);
+  strcpy(todo_item->description, description);
+
+  return todo_item;
+}
+
|int main() {
|  char input[1024];
|  int quitting = 0;

~~~ 9. todo includes
--- todo.c
+++ todo.c
@@ -1,4 +1,6 @@
|#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
|
|typedef struct TodoItem {
|  char* description;

~~~ 10. todo_print
--- todo.c
+++ todo.c
@@ -7,6 +7,19 @@
|  struct TodoItem* next;
|} TodoItem;
|
+void todo_print(TodoItem* todo) {
+  if (todo == NULL) {
+    printf("No todos! :D\n");
+  }
+
+  int id = 1;
+  while (todo) {
+    printf("%d. %s\n", id, todo->description);
+    todo = todo->next;
+    id++;
+  }
+}
+
|TodoItem* todo_add(TodoItem* todo, const char* description) {
|  TodoItem* todo_item = (TodoItem*)malloc(sizeof(TodoItem));
|  size_t len = strlen(description);

~~~ 11. call todo_print
--- todo.c
+++ todo.c
@@ -37,6 +37,8 @@
|  TodoItem* todo = NULL;
|
|  while (!quitting) {
+    todo_print(todo);
+
|    printf("todo> ");
|    fflush(stdout);
|

~~~ 12. trim trailing newline
--- todo.c
+++ todo.c
@@ -43,6 +43,11 @@
|    fflush(stdout);
|
|    if (fgets(input, sizeof(input) - 1, stdin)) {
+      if (input[0]) {
+        // Trim trailing newline.
+        input[strlen(input) - 1] = '\0';
+      }
+
|      switch (input[0]) {
|        case '+':
|          todo = todo_add(todo, &input[1]);

~~~ 13. better cli
--- todo.c
+++ todo.c
@@ -55,6 +55,11 @@
|        case 'q':
|          quitting = 1;
|          break;
+        case '\0':
+          break;
+        default:
+          printf("Invalid command.\nAvailable commands: + q\n\n");
+          break;
|      }
|    }
|

~~~ 14. call todo_remove
--- todo.c
+++ todo.c
@@ -52,6 +52,9 @@
|        case '+':
|          todo = todo_add(todo, &input[1]);
|          break;
+        case '-':
+          todo = todo_remove(todo, atoi(&input[1]));
+          break;
|        case 'q':
|          quitting = 1;
|          break;

~~~ 15. remove xs
--- todo.c
+++ todo.c
@@ -31,6 +31,23 @@
|  return todo_item;
|}
|
+TodoItem* todo_remove(TodoItem* todo, int index) {
+  int id = 1;
+  TodoItem* cur = todo;
+  while (cur) {
+    if (id == index - 1) {
+      if (cur->next) {
+        cur->next = cur->next->next;
+      }
+      break;
+    }
+    cur = cur->next;
+    id++;
+  }
+
+  return todo;
+}
+
|int main() {
|  char input[1024];
|  int quitting = 0;

~~~ 16. remove x
--- todo.c
+++ todo.c
@@ -32,6 +32,10 @@
|}
|
|TodoItem* todo_remove(TodoItem* todo, int index) {
+  if (index == 1 && todo) {
+    return todo->next;
+  }
+
|  int id = 1;
|  TodoItem* cur = todo;
|  while (cur) {

~~~ 17. add snip command
--- todo.c
+++ todo.c
@@ -76,13 +76,16 @@
|        case '-':
|          todo = todo_remove(todo, atoi(&input[1]));
|          break;
+        case '/':
+          todo = todo_snip(todo, atoi(&input[1]));
+          break;
|        case 'q':
|          quitting = 1;
|          break;
|        case '\0':
|          break;
|        default:
-          printf("Invalid command.\nAvailable commands: + q\n\n");
+          printf("Invalid command.\nAvailable commands: + - / q\n\n");
|          break;
|      }
|    }

~~~ 18. snip xs
--- todo.c
+++ todo.c
@@ -52,6 +52,21 @@
|  return todo;
|}
|
+TodoItem* todo_snip(TodoItem* todo, int index) {
+  int id = 1;
+  TodoItem* cur = todo;
+  while (cur) {
+    if (id == index - 1) {
+      cur->next = NULL;
+      break;
+    }
+    cur = cur->next;
+    id++;
+  }
+
+  return todo;
+}
+
|int main() {
|  char input[1024];
|  int quitting = 0;

~~~ 19. snip x
--- todo.c
+++ todo.c
@@ -53,6 +53,10 @@
|}
|
|TodoItem* todo_snip(TodoItem* todo, int index) {
+  if (index <= 1) {
+    return NULL;
+  }
+
|  int id = 1;
|  TodoItem* cur = todo;
|  while (cur) {

~~~ 20. free final todo list
--- todo.c
+++ todo.c
@@ -115,5 +115,14 @@
|    }
|  }
|
+  TodoItem* cur = todo;
+  while (cur) {
+    TodoItem* to_delete = cur;
+    cur = cur->next;
+
+    free(to_delete->description);
+    free(to_delete);
+  }
+
|  return 0;
|}

~~~ 21. free remove x
--- todo.c
+++ todo.c
@@ -33,7 +33,10 @@
|
|TodoItem* todo_remove(TodoItem* todo, int index) {
|  if (index == 1 && todo) {
-    return todo->next;
+    TodoItem* next = todo->next;
+    free(todo->description);
+    free(todo);
+    return next;
|  }
|
|  int id = 1;

~~~ 22. free remove xs
--- todo.c
+++ todo.c
@@ -44,7 +44,10 @@
|  while (cur) {
|    if (id == index - 1) {
|      if (cur->next) {
+        TodoItem* to_delete = cur->next;
|        cur->next = cur->next->next;
+        free(to_delete->description);
+        free(to_delete);
|      }
|      break;
|    }

~~~ 23. free snip x
--- todo.c
+++ todo.c
@@ -60,6 +60,12 @@
|
|TodoItem* todo_snip(TodoItem* todo, int index) {
|  if (index <= 1) {
+    while (todo) {
+      TodoItem* to_delete = todo;
+      todo = todo->next;
+      free(to_delete->description);
+      free(to_delete);
+    }
|    return NULL;
|  }
|

~~~ 24. free snip xs
--- todo.c
+++ todo.c
@@ -73,7 +73,14 @@
|  TodoItem* cur = todo;
|  while (cur) {
|    if (id == index - 1) {
+      TodoItem* to_snip = cur->next;
|      cur->next = NULL;
+      while (to_snip) {
+        TodoItem* to_delete = to_snip;
+        to_snip = to_snip->next;
+        free(to_delete->description);
+        free(to_delete);
+      }
|      break;
|    }
|    cur = cur->next;

